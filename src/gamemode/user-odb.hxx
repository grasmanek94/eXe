// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef USER_ODB_HXX
#define USER_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "user.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // user
  //
  template <>
  struct class_traits< ::user >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::user >
  {
    public:
    typedef ::user object_type;
    typedef ::user* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ban
  //
  template <>
  struct class_traits< ::ban >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ban >
  {
    public:
    typedef ::ban object_type;
    typedef ::ban* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // mafia
  //
  template <>
  struct class_traits< ::mafia >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mafia >
  {
    public:
    typedef ::mafia object_type;
    typedef ::mafia* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // house
  //
  template <>
  struct class_traits< ::house >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::house >
  {
    public:
    typedef ::house object_type;
    typedef ::house* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // sentrygun
  //
  template <>
  struct class_traits< ::sentrygun >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::sentrygun >
  {
    public:
    typedef ::sentrygun object_type;
    typedef ::sentrygun* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // user
  //
  template <typename A>
  struct query_columns< ::user, id_sqlite, A >
  {
    // displayname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    displayname_type_;

    static const displayname_type_ displayname;

    // password
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    password_type_;

    static const password_type_ password;

    // money
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    money_type_;

    static const money_type_ money;

    // score
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    score_type_;

    static const score_type_ score;

    // kills
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    kills_type_;

    static const kills_type_ kills;

    // experience
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    experience_type_;

    static const experience_type_ experience;

    // deaths
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    deaths_type_;

    static const deaths_type_ deaths;

    // privilidges
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    privilidges_type_;

    static const privilidges_type_ privilidges;

    // bounty
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bounty_type_;

    static const bounty_type_ bounty;

    // suicides
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    suicides_type_;

    static const suicides_type_ suicides;

    // respect
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    respect_type_;

    static const respect_type_ respect;

    // kicks
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    kicks_type_;

    static const kicks_type_ kicks;

    // warns
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    warns_type_;

    static const warns_type_ warns;

    // playtime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    playtime_type_;

    static const playtime_type_ playtime;

    // banned
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    banned_type_;

    static const banned_type_ banned;

    // ban_reason
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    ban_reason_type_;

    static const ban_reason_type_ ban_reason;

    // ban_who
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    ban_who_type_;

    static const ban_who_type_ ban_who;

    // bannedip
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bannedip_type_;

    static const bannedip_type_ bannedip;

    // bannedidentificator
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bannedidentificator_type_;

    static const bannedidentificator_type_ bannedidentificator;

    // jailtime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    jailtime_type_;

    static const jailtime_type_ jailtime;

    // registertime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    registertime_type_;

    static const registertime_type_ registertime;

    // email
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    email_type_;

    static const email_type_ email;

    // SkinModelID
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    SkinModelID_type_;

    static const SkinModelID_type_ SkinModelID;

    // Premium
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Premium_type_;

    static const Premium_type_ Premium;

    // lastconnected
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    lastconnected_type_;

    static const lastconnected_type_ lastconnected;

    // MafiaName
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    MafiaName_type_;

    static const MafiaName_type_ MafiaName;

    // UseMafiaSkin
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    UseMafiaSkin_type_;

    static const UseMafiaSkin_type_ UseMafiaSkin;

    // UseMafiaSpawn
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    UseMafiaSpawn_type_;

    static const UseMafiaSpawn_type_ UseMafiaSpawn;

    // rampid
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    rampid_type_;

    static const rampid_type_ rampid;

    // SaveX
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    SaveX_type_;

    static const SaveX_type_ SaveX;

    // SaveY
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    SaveY_type_;

    static const SaveY_type_ SaveY;

    // SaveZ
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    SaveZ_type_;

    static const SaveZ_type_ SaveZ;

    // SaveA
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    SaveA_type_;

    static const SaveA_type_ SaveA;

    // staticcolor
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    staticcolor_type_;

    static const staticcolor_type_ staticcolor;

    // bank
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bank_type_;

    static const bank_type_ bank;

    // registerip
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    registerip_type_;

    static const registerip_type_ registerip;

    // lastip
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    lastip_type_;

    static const lastip_type_ lastip;

    // recoverycode
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    recoverycode_type_;

    static const recoverycode_type_ recoverycode;

    // mailverifiedtime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    mailverifiedtime_type_;

    static const mailverifiedtime_type_ mailverifiedtime;

    // lastmailsent
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    lastmailsent_type_;

    static const lastmailsent_type_ lastmailsent;

    // verifiedmail
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    verifiedmail_type_;

    static const verifiedmail_type_ verifiedmail;

    // verificationsent
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    verificationsent_type_;

    static const verificationsent_type_ verificationsent;

    // verifiedrecoverycode
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    verifiedrecoverycode_type_;

    static const verifiedrecoverycode_type_ verifiedrecoverycode;

    // PrivateCars
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        char[720],
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    PrivateCars_type_;

    static const PrivateCars_type_ PrivateCars;

    // achievementdata
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        char[4096],
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    achievementdata_type_;

    static const achievementdata_type_ achievementdata;

    // weapondata
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        char[440],
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    weapondata_type_;

    static const weapondata_type_ weapondata;

    // nickname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    nickname_type_;

    static const nickname_type_ nickname;
  };

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::displayname_type_
  query_columns< ::user, id_sqlite, A >::
  displayname (A::table_name, "\"displayname\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::password_type_
  query_columns< ::user, id_sqlite, A >::
  password (A::table_name, "\"password\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::money_type_
  query_columns< ::user, id_sqlite, A >::
  money (A::table_name, "\"money\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::score_type_
  query_columns< ::user, id_sqlite, A >::
  score (A::table_name, "\"score\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::kills_type_
  query_columns< ::user, id_sqlite, A >::
  kills (A::table_name, "\"kills\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::experience_type_
  query_columns< ::user, id_sqlite, A >::
  experience (A::table_name, "\"experience\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::deaths_type_
  query_columns< ::user, id_sqlite, A >::
  deaths (A::table_name, "\"deaths\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::privilidges_type_
  query_columns< ::user, id_sqlite, A >::
  privilidges (A::table_name, "\"privilidges\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::bounty_type_
  query_columns< ::user, id_sqlite, A >::
  bounty (A::table_name, "\"bounty\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::suicides_type_
  query_columns< ::user, id_sqlite, A >::
  suicides (A::table_name, "\"suicides\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::respect_type_
  query_columns< ::user, id_sqlite, A >::
  respect (A::table_name, "\"respect\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::kicks_type_
  query_columns< ::user, id_sqlite, A >::
  kicks (A::table_name, "\"kicks\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::warns_type_
  query_columns< ::user, id_sqlite, A >::
  warns (A::table_name, "\"warns\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::playtime_type_
  query_columns< ::user, id_sqlite, A >::
  playtime (A::table_name, "\"playtime\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::banned_type_
  query_columns< ::user, id_sqlite, A >::
  banned (A::table_name, "\"banned\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::ban_reason_type_
  query_columns< ::user, id_sqlite, A >::
  ban_reason (A::table_name, "\"ban_reason\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::ban_who_type_
  query_columns< ::user, id_sqlite, A >::
  ban_who (A::table_name, "\"ban_who\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::bannedip_type_
  query_columns< ::user, id_sqlite, A >::
  bannedip (A::table_name, "\"bannedip\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::bannedidentificator_type_
  query_columns< ::user, id_sqlite, A >::
  bannedidentificator (A::table_name, "\"bannedidentificator\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::jailtime_type_
  query_columns< ::user, id_sqlite, A >::
  jailtime (A::table_name, "\"jailtime\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::registertime_type_
  query_columns< ::user, id_sqlite, A >::
  registertime (A::table_name, "\"registertime\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::email_type_
  query_columns< ::user, id_sqlite, A >::
  email (A::table_name, "\"email\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::SkinModelID_type_
  query_columns< ::user, id_sqlite, A >::
  SkinModelID (A::table_name, "\"SkinModelID\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::Premium_type_
  query_columns< ::user, id_sqlite, A >::
  Premium (A::table_name, "\"Premium\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::lastconnected_type_
  query_columns< ::user, id_sqlite, A >::
  lastconnected (A::table_name, "\"lastconnected\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::MafiaName_type_
  query_columns< ::user, id_sqlite, A >::
  MafiaName (A::table_name, "\"MafiaName\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::UseMafiaSkin_type_
  query_columns< ::user, id_sqlite, A >::
  UseMafiaSkin (A::table_name, "\"UseMafiaSkin\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::UseMafiaSpawn_type_
  query_columns< ::user, id_sqlite, A >::
  UseMafiaSpawn (A::table_name, "\"UseMafiaSpawn\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::rampid_type_
  query_columns< ::user, id_sqlite, A >::
  rampid (A::table_name, "\"rampid\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::SaveX_type_
  query_columns< ::user, id_sqlite, A >::
  SaveX (A::table_name, "\"SaveX\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::SaveY_type_
  query_columns< ::user, id_sqlite, A >::
  SaveY (A::table_name, "\"SaveY\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::SaveZ_type_
  query_columns< ::user, id_sqlite, A >::
  SaveZ (A::table_name, "\"SaveZ\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::SaveA_type_
  query_columns< ::user, id_sqlite, A >::
  SaveA (A::table_name, "\"SaveA\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::staticcolor_type_
  query_columns< ::user, id_sqlite, A >::
  staticcolor (A::table_name, "\"staticcolor\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::bank_type_
  query_columns< ::user, id_sqlite, A >::
  bank (A::table_name, "\"bank\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::registerip_type_
  query_columns< ::user, id_sqlite, A >::
  registerip (A::table_name, "\"registerip\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::lastip_type_
  query_columns< ::user, id_sqlite, A >::
  lastip (A::table_name, "\"lastip\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::recoverycode_type_
  query_columns< ::user, id_sqlite, A >::
  recoverycode (A::table_name, "\"recoverycode\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::mailverifiedtime_type_
  query_columns< ::user, id_sqlite, A >::
  mailverifiedtime (A::table_name, "\"mailverifiedtime\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::lastmailsent_type_
  query_columns< ::user, id_sqlite, A >::
  lastmailsent (A::table_name, "\"lastmailsent\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::verifiedmail_type_
  query_columns< ::user, id_sqlite, A >::
  verifiedmail (A::table_name, "\"verifiedmail\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::verificationsent_type_
  query_columns< ::user, id_sqlite, A >::
  verificationsent (A::table_name, "\"verificationsent\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::verifiedrecoverycode_type_
  query_columns< ::user, id_sqlite, A >::
  verifiedrecoverycode (A::table_name, "\"verifiedrecoverycode\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::PrivateCars_type_
  query_columns< ::user, id_sqlite, A >::
  PrivateCars (A::table_name, "\"PrivateCars\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::achievementdata_type_
  query_columns< ::user, id_sqlite, A >::
  achievementdata (A::table_name, "\"achievementdata\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::weapondata_type_
  query_columns< ::user, id_sqlite, A >::
  weapondata (A::table_name, "\"weapondata\"", 0);

  template <typename A>
  const typename query_columns< ::user, id_sqlite, A >::nickname_type_
  query_columns< ::user, id_sqlite, A >::
  nickname (A::table_name, "\"nickname\"", 0);

  template <typename A>
  struct pointer_query_columns< ::user, id_sqlite, A >:
    query_columns< ::user, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::user, id_sqlite >:
    public access::object_traits< ::user >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // displayname_
      //
      details::buffer displayname_value;
      std::size_t displayname_size;
      bool displayname_null;

      // password_
      //
      details::buffer password_value;
      std::size_t password_size;
      bool password_null;

      // money_
      //
      long long money_value;
      bool money_null;

      // score_
      //
      long long score_value;
      bool score_null;

      // kills_
      //
      long long kills_value;
      bool kills_null;

      // experience_
      //
      long long experience_value;
      bool experience_null;

      // deaths_
      //
      long long deaths_value;
      bool deaths_null;

      // privilidges_
      //
      long long privilidges_value;
      bool privilidges_null;

      // bounty_
      //
      long long bounty_value;
      bool bounty_null;

      // suicides_
      //
      long long suicides_value;
      bool suicides_null;

      // respect_
      //
      long long respect_value;
      bool respect_null;

      // kicks_
      //
      long long kicks_value;
      bool kicks_null;

      // warns_
      //
      long long warns_value;
      bool warns_null;

      // playtime_
      //
      long long playtime_value;
      bool playtime_null;

      // banned_
      //
      long long banned_value;
      bool banned_null;

      // ban_reason_
      //
      details::buffer ban_reason_value;
      std::size_t ban_reason_size;
      bool ban_reason_null;

      // ban_who_
      //
      details::buffer ban_who_value;
      std::size_t ban_who_size;
      bool ban_who_null;

      // bannedip_
      //
      long long bannedip_value;
      bool bannedip_null;

      // bannedidentificator_
      //
      long long bannedidentificator_value;
      bool bannedidentificator_null;

      // jailtime_
      //
      long long jailtime_value;
      bool jailtime_null;

      // registertime_
      //
      long long registertime_value;
      bool registertime_null;

      // email_
      //
      details::buffer email_value;
      std::size_t email_size;
      bool email_null;

      // SkinModelID_
      //
      long long SkinModelID_value;
      bool SkinModelID_null;

      // Premium_
      //
      long long Premium_value;
      bool Premium_null;

      // lastconnected_
      //
      long long lastconnected_value;
      bool lastconnected_null;

      // MafiaName_
      //
      details::buffer MafiaName_value;
      std::size_t MafiaName_size;
      bool MafiaName_null;

      // UseMafiaSkin_
      //
      long long UseMafiaSkin_value;
      bool UseMafiaSkin_null;

      // UseMafiaSpawn_
      //
      long long UseMafiaSpawn_value;
      bool UseMafiaSpawn_null;

      // rampid_
      //
      long long rampid_value;
      bool rampid_null;

      // SaveX_
      //
      double SaveX_value;
      bool SaveX_null;

      // SaveY_
      //
      double SaveY_value;
      bool SaveY_null;

      // SaveZ_
      //
      double SaveZ_value;
      bool SaveZ_null;

      // SaveA_
      //
      double SaveA_value;
      bool SaveA_null;

      // staticcolor_
      //
      long long staticcolor_value;
      bool staticcolor_null;

      // bank_
      //
      long long bank_value;
      bool bank_null;

      // registerip_
      //
      details::buffer registerip_value;
      std::size_t registerip_size;
      bool registerip_null;

      // lastip_
      //
      details::buffer lastip_value;
      std::size_t lastip_size;
      bool lastip_null;

      // recoverycode_
      //
      details::buffer recoverycode_value;
      std::size_t recoverycode_size;
      bool recoverycode_null;

      // mailverifiedtime_
      //
      long long mailverifiedtime_value;
      bool mailverifiedtime_null;

      // lastmailsent_
      //
      long long lastmailsent_value;
      bool lastmailsent_null;

      // verifiedmail_
      //
      details::buffer verifiedmail_value;
      std::size_t verifiedmail_size;
      bool verifiedmail_null;

      // verificationsent_
      //
      long long verificationsent_value;
      bool verificationsent_null;

      // verifiedrecoverycode_
      //
      details::buffer verifiedrecoverycode_value;
      std::size_t verifiedrecoverycode_size;
      bool verifiedrecoverycode_null;

      // PrivateCars_
      //
      details::buffer PrivateCars_value;
      std::size_t PrivateCars_size;
      bool PrivateCars_null;

      // achievementdata_
      //
      details::buffer achievementdata_value;
      std::size_t achievementdata_size;
      bool achievementdata_null;

      // weapondata_
      //
      details::buffer weapondata_value;
      std::size_t weapondata_size;
      bool weapondata_null;

      // nickname_
      //
      details::buffer nickname_value;
      std::size_t nickname_size;
      bool nickname_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 47UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::user, id_common >:
    public access::object_traits_impl< ::user, id_sqlite >
  {
  };

  // ban
  //
  template <typename A>
  struct query_columns< ::ban, id_sqlite, A >
  {
    // bannedtime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bannedtime_type_;

    static const bannedtime_type_ bannedtime;

    // bannedidentificator
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bannedidentificator_type_;

    static const bannedidentificator_type_ bannedidentificator;

    // banneduser
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    banneduser_type_;

    static const banneduser_type_ banneduser;

    // whobannedthisuser
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    whobannedthisuser_type_;

    static const whobannedthisuser_type_ whobannedthisuser;

    // banreason
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    banreason_type_;

    static const banreason_type_ banreason;

    // ip
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    ip_type_;

    static const ip_type_ ip;
  };

  template <typename A>
  const typename query_columns< ::ban, id_sqlite, A >::bannedtime_type_
  query_columns< ::ban, id_sqlite, A >::
  bannedtime (A::table_name, "\"bannedtime\"", 0);

  template <typename A>
  const typename query_columns< ::ban, id_sqlite, A >::bannedidentificator_type_
  query_columns< ::ban, id_sqlite, A >::
  bannedidentificator (A::table_name, "\"bannedidentificator\"", 0);

  template <typename A>
  const typename query_columns< ::ban, id_sqlite, A >::banneduser_type_
  query_columns< ::ban, id_sqlite, A >::
  banneduser (A::table_name, "\"banneduser\"", 0);

  template <typename A>
  const typename query_columns< ::ban, id_sqlite, A >::whobannedthisuser_type_
  query_columns< ::ban, id_sqlite, A >::
  whobannedthisuser (A::table_name, "\"whobannedthisuser\"", 0);

  template <typename A>
  const typename query_columns< ::ban, id_sqlite, A >::banreason_type_
  query_columns< ::ban, id_sqlite, A >::
  banreason (A::table_name, "\"banreason\"", 0);

  template <typename A>
  const typename query_columns< ::ban, id_sqlite, A >::ip_type_
  query_columns< ::ban, id_sqlite, A >::
  ip (A::table_name, "\"ip\"", 0);

  template <typename A>
  struct pointer_query_columns< ::ban, id_sqlite, A >:
    query_columns< ::ban, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ban, id_sqlite >:
    public access::object_traits< ::ban >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // bannedtime_
      //
      long long bannedtime_value;
      bool bannedtime_null;

      // bannedidentificator_
      //
      long long bannedidentificator_value;
      bool bannedidentificator_null;

      // banneduser_
      //
      details::buffer banneduser_value;
      std::size_t banneduser_size;
      bool banneduser_null;

      // whobannedthisuser_
      //
      details::buffer whobannedthisuser_value;
      std::size_t whobannedthisuser_size;
      bool whobannedthisuser_null;

      // banreason_
      //
      details::buffer banreason_value;
      std::size_t banreason_size;
      bool banreason_null;

      // ip_
      //
      long long ip_value;
      bool ip_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::ban, id_common >:
    public access::object_traits_impl< ::ban, id_sqlite >
  {
  };

  // mafia
  //
  template <typename A>
  struct query_columns< ::mafia, id_sqlite, A >
  {
    // displayname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    displayname_type_;

    static const displayname_type_ displayname;

    // members
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    members_type_;

    static const members_type_ members;

    // base_identifier
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    base_identifier_type_;

    static const base_identifier_type_ base_identifier;

    // last_load
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    last_load_type_;

    static const last_load_type_ last_load;

    // action_permissions
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    action_permissions_type_;

    static const action_permissions_type_ action_permissions;

    // color
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    color_type_;

    static const color_type_ color;

    // money
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    money_type_;

    static const money_type_ money;

    // score
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    score_type_;

    static const score_type_ score;

    // skin
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    skin_type_;

    static const skin_type_ skin;

    // SpawnX
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    SpawnX_type_;

    static const SpawnX_type_ SpawnX;

    // SpawnY
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    SpawnY_type_;

    static const SpawnY_type_ SpawnY;

    // SpawnZ
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    SpawnZ_type_;

    static const SpawnZ_type_ SpawnZ;

    // SpawnA
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    SpawnA_type_;

    static const SpawnA_type_ SpawnA;

    // kills
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    kills_type_;

    static const kills_type_ kills;

    // deaths
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    deaths_type_;

    static const deaths_type_ deaths;

    // experience
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    experience_type_;

    static const experience_type_ experience;

    // creation_date
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    creation_date_type_;

    static const creation_date_type_ creation_date;

    // playtime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    playtime_type_;

    static const playtime_type_ playtime;

    // tag
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    tag_type_;

    static const tag_type_ tag;

    // PrivateCars
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        char[144],
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    PrivateCars_type_;

    static const PrivateCars_type_ PrivateCars;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::displayname_type_
  query_columns< ::mafia, id_sqlite, A >::
  displayname (A::table_name, "\"displayname\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::members_type_
  query_columns< ::mafia, id_sqlite, A >::
  members (A::table_name, "\"members\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::base_identifier_type_
  query_columns< ::mafia, id_sqlite, A >::
  base_identifier (A::table_name, "\"base_identifier\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::last_load_type_
  query_columns< ::mafia, id_sqlite, A >::
  last_load (A::table_name, "\"last_load\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::action_permissions_type_
  query_columns< ::mafia, id_sqlite, A >::
  action_permissions (A::table_name, "\"action_permissions\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::color_type_
  query_columns< ::mafia, id_sqlite, A >::
  color (A::table_name, "\"color\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::money_type_
  query_columns< ::mafia, id_sqlite, A >::
  money (A::table_name, "\"money\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::score_type_
  query_columns< ::mafia, id_sqlite, A >::
  score (A::table_name, "\"score\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::skin_type_
  query_columns< ::mafia, id_sqlite, A >::
  skin (A::table_name, "\"skin\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::SpawnX_type_
  query_columns< ::mafia, id_sqlite, A >::
  SpawnX (A::table_name, "\"SpawnX\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::SpawnY_type_
  query_columns< ::mafia, id_sqlite, A >::
  SpawnY (A::table_name, "\"SpawnY\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::SpawnZ_type_
  query_columns< ::mafia, id_sqlite, A >::
  SpawnZ (A::table_name, "\"SpawnZ\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::SpawnA_type_
  query_columns< ::mafia, id_sqlite, A >::
  SpawnA (A::table_name, "\"SpawnA\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::kills_type_
  query_columns< ::mafia, id_sqlite, A >::
  kills (A::table_name, "\"kills\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::deaths_type_
  query_columns< ::mafia, id_sqlite, A >::
  deaths (A::table_name, "\"deaths\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::experience_type_
  query_columns< ::mafia, id_sqlite, A >::
  experience (A::table_name, "\"experience\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::creation_date_type_
  query_columns< ::mafia, id_sqlite, A >::
  creation_date (A::table_name, "\"creation_date\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::playtime_type_
  query_columns< ::mafia, id_sqlite, A >::
  playtime (A::table_name, "\"playtime\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::tag_type_
  query_columns< ::mafia, id_sqlite, A >::
  tag (A::table_name, "\"tag\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::PrivateCars_type_
  query_columns< ::mafia, id_sqlite, A >::
  PrivateCars (A::table_name, "\"PrivateCars\"", 0);

  template <typename A>
  const typename query_columns< ::mafia, id_sqlite, A >::name_type_
  query_columns< ::mafia, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  struct pointer_query_columns< ::mafia, id_sqlite, A >:
    query_columns< ::mafia, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::mafia, id_sqlite >:
    public access::object_traits< ::mafia >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // displayname_
      //
      details::buffer displayname_value;
      std::size_t displayname_size;
      bool displayname_null;

      // members_
      //
      details::buffer members_value;
      std::size_t members_size;
      bool members_null;

      // base_identifier_
      //
      details::buffer base_identifier_value;
      std::size_t base_identifier_size;
      bool base_identifier_null;

      // last_load_
      //
      long long last_load_value;
      bool last_load_null;

      // action_permissions_
      //
      long long action_permissions_value;
      bool action_permissions_null;

      // color_
      //
      long long color_value;
      bool color_null;

      // money_
      //
      long long money_value;
      bool money_null;

      // score_
      //
      long long score_value;
      bool score_null;

      // skin_
      //
      long long skin_value;
      bool skin_null;

      // SpawnX_
      //
      double SpawnX_value;
      bool SpawnX_null;

      // SpawnY_
      //
      double SpawnY_value;
      bool SpawnY_null;

      // SpawnZ_
      //
      double SpawnZ_value;
      bool SpawnZ_null;

      // SpawnA_
      //
      double SpawnA_value;
      bool SpawnA_null;

      // kills_
      //
      long long kills_value;
      bool kills_null;

      // deaths_
      //
      long long deaths_value;
      bool deaths_null;

      // experience_
      //
      long long experience_value;
      bool experience_null;

      // creation_date_
      //
      long long creation_date_value;
      bool creation_date_null;

      // playtime_
      //
      long long playtime_value;
      bool playtime_null;

      // tag_
      //
      details::buffer tag_value;
      std::size_t tag_size;
      bool tag_null;

      // PrivateCars_
      //
      details::buffer PrivateCars_value;
      std::size_t PrivateCars_size;
      bool PrivateCars_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 21UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mafia, id_common >:
    public access::object_traits_impl< ::mafia, id_sqlite >
  {
  };

  // house
  //
  template <typename A>
  struct query_columns< ::house, id_sqlite, A >
  {
    // world_posX
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    world_posX_type_;

    static const world_posX_type_ world_posX;

    // world_posY
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    world_posY_type_;

    static const world_posY_type_ world_posY;

    // world_posZ
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    world_posZ_type_;

    static const world_posZ_type_ world_posZ;

    // world_angle
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    world_angle_type_;

    static const world_angle_type_ world_angle;

    // interior_posX
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    interior_posX_type_;

    static const interior_posX_type_ interior_posX;

    // interior_posY
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    interior_posY_type_;

    static const interior_posY_type_ interior_posY;

    // interior_posZ
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    interior_posZ_type_;

    static const interior_posZ_type_ interior_posZ;

    // interior_angle
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    interior_angle_type_;

    static const interior_angle_type_ interior_angle;

    // rented_to_date
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    rented_to_date_type_;

    static const rented_to_date_type_ rented_to_date;

    // rent_cost_cash_per_day
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    rent_cost_cash_per_day_type_;

    static const rent_cost_cash_per_day_type_ rent_cost_cash_per_day;

    // rent_cost_respect_per_day
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    rent_cost_respect_per_day_type_;

    static const rent_cost_respect_per_day_type_ rent_cost_respect_per_day;

    // interiorid
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    interiorid_type_;

    static const interiorid_type_ interiorid;

    // rented_to_mafia
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    rented_to_mafia_type_;

    static const rented_to_mafia_type_ rented_to_mafia;

    // rented_to_nickname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    rented_to_nickname_type_;

    static const rented_to_nickname_type_ rented_to_nickname;

    // locked
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    locked_type_;

    static const locked_type_ locked;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::world_posX_type_
  query_columns< ::house, id_sqlite, A >::
  world_posX (A::table_name, "\"world_posX\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::world_posY_type_
  query_columns< ::house, id_sqlite, A >::
  world_posY (A::table_name, "\"world_posY\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::world_posZ_type_
  query_columns< ::house, id_sqlite, A >::
  world_posZ (A::table_name, "\"world_posZ\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::world_angle_type_
  query_columns< ::house, id_sqlite, A >::
  world_angle (A::table_name, "\"world_angle\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::interior_posX_type_
  query_columns< ::house, id_sqlite, A >::
  interior_posX (A::table_name, "\"interior_posX\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::interior_posY_type_
  query_columns< ::house, id_sqlite, A >::
  interior_posY (A::table_name, "\"interior_posY\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::interior_posZ_type_
  query_columns< ::house, id_sqlite, A >::
  interior_posZ (A::table_name, "\"interior_posZ\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::interior_angle_type_
  query_columns< ::house, id_sqlite, A >::
  interior_angle (A::table_name, "\"interior_angle\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::rented_to_date_type_
  query_columns< ::house, id_sqlite, A >::
  rented_to_date (A::table_name, "\"rented_to_date\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::rent_cost_cash_per_day_type_
  query_columns< ::house, id_sqlite, A >::
  rent_cost_cash_per_day (A::table_name, "\"rent_cost_cash_per_day\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::rent_cost_respect_per_day_type_
  query_columns< ::house, id_sqlite, A >::
  rent_cost_respect_per_day (A::table_name, "\"rent_cost_respect_per_day\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::interiorid_type_
  query_columns< ::house, id_sqlite, A >::
  interiorid (A::table_name, "\"interiorid\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::rented_to_mafia_type_
  query_columns< ::house, id_sqlite, A >::
  rented_to_mafia (A::table_name, "\"rented_to_mafia\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::rented_to_nickname_type_
  query_columns< ::house, id_sqlite, A >::
  rented_to_nickname (A::table_name, "\"rented_to_nickname\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::locked_type_
  query_columns< ::house, id_sqlite, A >::
  locked (A::table_name, "\"locked\"", 0);

  template <typename A>
  const typename query_columns< ::house, id_sqlite, A >::id_type_
  query_columns< ::house, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::house, id_sqlite, A >:
    query_columns< ::house, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::house, id_sqlite >:
    public access::object_traits< ::house >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // world_posX_
      //
      double world_posX_value;
      bool world_posX_null;

      // world_posY_
      //
      double world_posY_value;
      bool world_posY_null;

      // world_posZ_
      //
      double world_posZ_value;
      bool world_posZ_null;

      // world_angle_
      //
      double world_angle_value;
      bool world_angle_null;

      // interior_posX_
      //
      double interior_posX_value;
      bool interior_posX_null;

      // interior_posY_
      //
      double interior_posY_value;
      bool interior_posY_null;

      // interior_posZ_
      //
      double interior_posZ_value;
      bool interior_posZ_null;

      // interior_angle_
      //
      double interior_angle_value;
      bool interior_angle_null;

      // rented_to_date_
      //
      long long rented_to_date_value;
      bool rented_to_date_null;

      // rent_cost_cash_per_day_
      //
      long long rent_cost_cash_per_day_value;
      bool rent_cost_cash_per_day_null;

      // rent_cost_respect_per_day_
      //
      long long rent_cost_respect_per_day_value;
      bool rent_cost_respect_per_day_null;

      // interiorid_
      //
      long long interiorid_value;
      bool interiorid_null;

      // rented_to_mafia_
      //
      long long rented_to_mafia_value;
      bool rented_to_mafia_null;

      // rented_to_nickname_
      //
      details::buffer rented_to_nickname_value;
      std::size_t rented_to_nickname_size;
      bool rented_to_nickname_null;

      // locked_
      //
      long long locked_value;
      bool locked_null;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 16UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::house, id_common >:
    public access::object_traits_impl< ::house, id_sqlite >
  {
  };

  // sentrygun
  //
  template <typename A>
  struct query_columns< ::sentrygun, id_sqlite, A >
  {
    // posX
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    posX_type_;

    static const posX_type_ posX;

    // posY
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    posY_type_;

    static const posY_type_ posY;

    // posZ
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    posZ_type_;

    static const posZ_type_ posZ;

    // angle
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    angle_type_;

    static const angle_type_ angle;

    // area_a_X
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    area_a_X_type_;

    static const area_a_X_type_ area_a_X;

    // area_a_Y
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    area_a_Y_type_;

    static const area_a_Y_type_ area_a_Y;

    // area_a_Z
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    area_a_Z_type_;

    static const area_a_Z_type_ area_a_Z;

    // area_b_X
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    area_b_X_type_;

    static const area_b_X_type_ area_b_X;

    // area_b_Y
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    area_b_Y_type_;

    static const area_b_Y_type_ area_b_Y;

    // area_b_Z
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    area_b_Z_type_;

    static const area_b_Z_type_ area_b_Z;

    // interiorid
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    interiorid_type_;

    static const interiorid_type_ interiorid;

    // worldid
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    worldid_type_;

    static const worldid_type_ worldid;

    // owner_status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    owner_status_type_;

    static const owner_status_type_ owner_status;

    // owner_name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    owner_name_type_;

    static const owner_name_type_ owner_name;

    // experience
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    experience_type_;

    static const experience_type_ experience;

    // respect
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    respect_type_;

    static const respect_type_ respect;

    // KilledVehicles
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    KilledVehicles_type_;

    static const KilledVehicles_type_ KilledVehicles;

    // KilledPlayers
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    KilledPlayers_type_;

    static const KilledPlayers_type_ KilledPlayers;

    // Destroyed
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    Destroyed_type_;

    static const Destroyed_type_ Destroyed;

    // deactivated
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    deactivated_type_;

    static const deactivated_type_ deactivated;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;
  };

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::posX_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  posX (A::table_name, "\"posX\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::posY_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  posY (A::table_name, "\"posY\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::posZ_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  posZ (A::table_name, "\"posZ\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::angle_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  angle (A::table_name, "\"angle\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::area_a_X_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  area_a_X (A::table_name, "\"area_a_X\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::area_a_Y_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  area_a_Y (A::table_name, "\"area_a_Y\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::area_a_Z_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  area_a_Z (A::table_name, "\"area_a_Z\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::area_b_X_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  area_b_X (A::table_name, "\"area_b_X\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::area_b_Y_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  area_b_Y (A::table_name, "\"area_b_Y\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::area_b_Z_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  area_b_Z (A::table_name, "\"area_b_Z\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::interiorid_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  interiorid (A::table_name, "\"interiorid\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::worldid_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  worldid (A::table_name, "\"worldid\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::owner_status_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  owner_status (A::table_name, "\"owner_status\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::owner_name_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  owner_name (A::table_name, "\"owner_name\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::experience_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  experience (A::table_name, "\"experience\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::respect_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  respect (A::table_name, "\"respect\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::KilledVehicles_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  KilledVehicles (A::table_name, "\"KilledVehicles\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::KilledPlayers_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  KilledPlayers (A::table_name, "\"KilledPlayers\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::Destroyed_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  Destroyed (A::table_name, "\"Destroyed\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::deactivated_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  deactivated (A::table_name, "\"deactivated\"", 0);

  template <typename A>
  const typename query_columns< ::sentrygun, id_sqlite, A >::id_type_
  query_columns< ::sentrygun, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  struct pointer_query_columns< ::sentrygun, id_sqlite, A >:
    query_columns< ::sentrygun, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::sentrygun, id_sqlite >:
    public access::object_traits< ::sentrygun >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // posX_
      //
      double posX_value;
      bool posX_null;

      // posY_
      //
      double posY_value;
      bool posY_null;

      // posZ_
      //
      double posZ_value;
      bool posZ_null;

      // angle_
      //
      double angle_value;
      bool angle_null;

      // area_a_X_
      //
      double area_a_X_value;
      bool area_a_X_null;

      // area_a_Y_
      //
      double area_a_Y_value;
      bool area_a_Y_null;

      // area_a_Z_
      //
      double area_a_Z_value;
      bool area_a_Z_null;

      // area_b_X_
      //
      double area_b_X_value;
      bool area_b_X_null;

      // area_b_Y_
      //
      double area_b_Y_value;
      bool area_b_Y_null;

      // area_b_Z_
      //
      double area_b_Z_value;
      bool area_b_Z_null;

      // interiorid_
      //
      long long interiorid_value;
      bool interiorid_null;

      // worldid_
      //
      long long worldid_value;
      bool worldid_null;

      // owner_status_
      //
      long long owner_status_value;
      bool owner_status_null;

      // owner_name_
      //
      details::buffer owner_name_value;
      std::size_t owner_name_size;
      bool owner_name_null;

      // experience_
      //
      long long experience_value;
      bool experience_null;

      // respect_
      //
      long long respect_value;
      bool respect_null;

      // KilledVehicles_
      //
      long long KilledVehicles_value;
      bool KilledVehicles_null;

      // KilledPlayers_
      //
      long long KilledPlayers_value;
      bool KilledPlayers_null;

      // Destroyed_
      //
      long long Destroyed_value;
      bool Destroyed_null;

      // deactivated_
      //
      long long deactivated_value;
      bool deactivated_null;

      // id_
      //
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 21UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::sentrygun, id_common >:
    public access::object_traits_impl< ::sentrygun, id_sqlite >
  {
  };

  // user
  //
  // ban
  //
  // mafia
  //
  // house
  //
  // sentrygun
  //
}

#include "user-odb.ixx"

#include <odb/post.hxx>

#endif // USER_ODB_HXX
