/*
	Copyright (c) 2014 - 2015 Rafa³ "Gamer_Z" Grasman
		* See LICENSE.md in root directory for license
		* Written by Rafa³ Grasman <grasmanek94@gmail.com>
		* Development Start Month-Year: October-2014

	________________________________________________________________
	Purpose of this file
		-	Implementation of the core anti cheat logic required for the mode

	________________________________________________________________	
	Notes
		-	AntiCheat hates lags
		-	Mount chillad doesn't like Anti Speed Hack, fuck Mt. Chillad

	________________________________________________________________	
	TODO
		- Fix anti FlyHack (keeps detecting pple in pools)
		- Make anti FlyHack better
		- Measure all vehicle speeds

	________________________________________________________________
	Dependencies
		Extension
		WorldData
		Streamer
		CheatReportHandler

	________________________________________________________________
	Project Contributors
		Tom 'IceCube' Hewlett
		Mariusz 'C2A1' K.
		Mateusz 'eider' Cichoñ
*/
#include "GameMode.hxx"

#include "vehiclespeedlist.var"
/////////////////////////////////////////////////////////////////////////////////////
//anticheat r25 source edited for this mode
#pragma warning (disable: 4996)

#define PLUGIN_MAIN_VERSION (26)

#define PI (3.1415926535897932384626433832795f)

int g_Ticked = 0;
int g_TickMax = 100;

int g_max_ip = 6;//257 = one ip can connect as many times as it wants to, 0 means NOBODY can connect, 1 means each player needs an unique IP address

#define g_RESET_BITS()     (g_CheckForStuff = 0)
#define g_SET_TRUE(check)		(g_CheckForStuff |= check)
#define g_SET_FALSE(check)		(g_CheckForStuff &= (~check))
#define g_TOGGLE(check)			(g_CheckForStuff ^= check)
#define g_IS_TRUE(check)      (g_CheckForStuff & check)

#define FIX_RESET_BITS()     (g_Fixes = 0)
#define FIX_SET_TRUE(check)		(g_Fixes |= check)
#define FIX_SET_FALSE(check)		(g_Fixes &= (~check))
#define FIX_TOGGLE(check)			(g_Fixes ^= check)
#define FIX_IS_TRUE(check)      (g_Fixes & check)

#define p_RESET_BITS(playerid)     (p_CheckForStuff[playerid] = 0)
#define p_SET_TRUE(playerid,check)		(p_CheckForStuff[playerid] |= check)
#define p_SET_FALSE(playerid,check)		(p_CheckForStuff[playerid] &= (~check))
#define p_TOGGLE(playerid,check)			(p_CheckForStuff[playerid] ^= check)
#define p_IS_TRUE(playerid,check)      (p_CheckForStuff[playerid] & check)

//cheat reported
void CheatHandler(int playerid, int type, int extraint, float extrafloat, int extraint2);
void Report(int playerid, int type, int extraint, float extrafloat, int extraint2)
{
	CheatHandler(playerid, type, extraint, extrafloat, extraint2);
}

void Report(int playerid, int type)
{
	Report(playerid, type, 0, 0.0f, 0);
}

void Report(int playerid, int type, int extraint)
{
	Report(playerid, type, extraint, 0.0f, 0);
}

void Report(int playerid, int type, int extraint, int extraint2)
{
	Report(playerid, type, extraint, 0.0f, extraint2);
}

void Report(int playerid, int type, int extraint, float extraint2)
{
	Report(playerid, type, extraint, extraint2, 0);
}

void Report(int playerid, int type, float extrafloat)
{
	Report(playerid, type, 0, extrafloat, 0);
}

//
struct st_INACTIVITY
{
	clock_t LastActive;
	clock_t LastTick;
	bool Reported;
};

struct st_AIRBREAKMETER
{
	clock_t LastMeasured;
	float lastX;
	float lastY;
	float lastZ;
	float newX;
	float newY;
	float newZ;
};

unsigned long g_CheckForStuff = (unsigned long)-1;
unsigned long g_Fixes = (unsigned long)-1;
bool UseChatForInactivityMeasurement = true;
int g_max_ping = 1000;
int OPUvid;

std::map<unsigned long, unsigned char> ConnectedIPs;
std::map<unsigned long, clock_t> IPLastConnectTime;

std::array<unsigned long, MAX_PLAYERS> p_CheckForStuff;
std::array<bool,612> GivesParachute;
std::array<bool,MAX_PLAYERS> p_ABneecnextdetect;
std::array<bool,MAX_PLAYERS> p_IsSpectateAllowed;
std::array<bool,48> g_WeaponEnabled;
std::array<std::array<bool,48>,MAX_PLAYERS> p_WeaponEnabled;
std::array<std::array<bool,48>,MAX_PLAYERS> p_HasWeapon;
std::array<bool,MAX_PLAYERS> p_Frozen;
std::array<bool,MAX_PLAYERS> p_HasJetPack;
std::array<bool,MAX_PLAYERS> Spawned;
std::array<bool,MAX_VEHICLES + 1> VehicleHealthProtection;
std::array<bool,MAX_PLAYERS> PlayerDoingVehGodModeCheck;
std::array<int,MAX_PLAYERS> p_IsInVehicle;
std::array<int,MAX_PLAYERS> p_IsInVehicleDriver;
std::array<int,MAX_VEHICLES + 1> v_PlayerInVehicle;
std::array<std::array<int,48>,300> g_SkinHasWeapon;
std::array<std::array<int,48>,MAX_PLAYERS> p_SpawnInfoWeapons;
std::array<int,MAX_PLAYERS> p_LastAnimation;
std::array<int,MAX_PLAYERS> LastInterior;
std::array<int,MAX_PLAYERS> PlayerCanHeal;
std::array<int,MAX_PLAYERS> PlayerCanSwim;
std::array<int,MAX_PLAYERS> p_CanPlayerSpeedHack;
std::array<st_INACTIVITY,MAX_PLAYERS> p_AcivityInfo;
std::array<clock_t,MAX_PLAYERS> p_SpawnTime;
std::array<clock_t,MAX_PLAYERS> p_VehicleEnterTime;
std::array<clock_t,MAX_PLAYERS> p_SpeedHackLowValCheck;
std::array<clock_t,MAX_PLAYERS> p_NewKillAllowed;
std::array<clock_t,MAX_PLAYERS> WeaponProtection;
std::array<clock_t,MAX_PLAYERS> teleportprot;
std::array<clock_t,MAX_PLAYERS> LastTeleportDetection;
std::array<clock_t,MAX_PLAYERS> LastVehicleGodModeCheck;
std::array<clock_t,MAX_PLAYERS> PlayerVehicleHealSafety;
std::array<clock_t,MAX_PLAYERS> NextVehicleHealCheck;
std::array<float,MAX_PLAYERS> p_SpeedHackLowVal;
std::array<float,MAX_VEHICLES + 1> VehicleHealth;
std::array<float,MAX_VEHICLES + 1> VehicleHealthGodModeCheck;
std::array<std::array<float,4>,MAX_PLAYERS> PlayerHealth;
std::array<std::array<float,4>,MAX_PLAYERS> PlayerArmour;
std::array<st_AIRBREAKMETER,MAX_PLAYERS> p_AirBrkCheck;
std::array<std::array<std::bitset<64>,MAX_PLAYERS>,MAX_PLAYERS> p_HasBeenHitByWeapon;

clock_t g_IPConnectDelay = 100;
clock_t AllowedInactivityTime = 15 * 60 * 1000;
clock_t TimeDiffForSpawnKill = 2000;
clock_t g_MassTpDelay = 100;
/////////////////////////////////////////////////////////////////////////////////////
int fixSetPlayerVirtualWorld(int playerid, int worldid)
{
	static int oldworldid;
	if (Player[playerid].WorldID != worldid)
	{
		oldworldid = Player[playerid].WorldID;
		Player[playerid].WorldID = worldid;
		extOnPlayerVirtualWorldChange(playerid, worldid, oldworldid);
	}
	return sampgdk_SetPlayerVirtualWorld(playerid, worldid);
}

int safeSetSpawnInfo(int playerid, int team, int skin, float spawnX, float spawnY, float spawnZ, float angle, int weapon1, int weapon1ammo, int weapon2, int weapon2ammo, int weapon3, int weapon3ammo)
{
	p_SpawnInfoWeapons[playerid].fill(0);
	p_SpawnInfoWeapons[playerid][0] = weapon1;
	p_SpawnInfoWeapons[playerid][1] = weapon2;
	p_SpawnInfoWeapons[playerid][2] = weapon3;
	return SetSpawnInfo(playerid, team, skin, spawnX, spawnY, spawnZ, angle, weapon1, weapon1ammo, weapon2, weapon2ammo, weapon3, weapon3ammo);
}

int safeAddPlayerClass(int modelid, float spawnX, float spawnY, float spawnZ, float angle, int weapon1, int weapon1ammo, int weapon2, int weapon2ammo, int weapon3, int weapon3ammo)
{
	if (modelid < 0 || modelid > 299 || modelid == 74) return 0;
	g_SkinHasWeapon[modelid].fill(0);
	g_SkinHasWeapon[modelid][0] = weapon1;
	g_SkinHasWeapon[modelid][1] = weapon2;
	g_SkinHasWeapon[modelid][2] = weapon3;
	return AddPlayerClass(modelid, spawnX, spawnY, spawnZ, angle, weapon1, weapon1ammo, weapon2, weapon2ammo, weapon3, weapon3ammo);
}

int safeAddPlayerClassEx(int teamid, int modelid, float spawnX, float spawnY, float spawnZ, float angle, int weapon1, int weapon1ammo, int weapon2, int weapon2ammo, int weapon3, int weapon3ammo)
{
	if (modelid < 0 || modelid > 299 || modelid == 74) return 0;
	g_SkinHasWeapon[modelid].fill(false);
	g_SkinHasWeapon[modelid][0] = weapon1;
	g_SkinHasWeapon[modelid][1] = weapon2;
	g_SkinHasWeapon[modelid][2] = weapon3;
	return AddPlayerClassEx(teamid, modelid, spawnX, spawnY, spawnZ, angle, weapon1, weapon1ammo, weapon2, weapon2ammo, weapon3, weapon3ammo);
}

int safeGivePlayerWeapon(int playerid, int weaponid, int ammo)
{
	p_HasWeapon[playerid][weaponid] = true;
	return GivePlayerWeapon(playerid, weaponid, ammo);
}

int safeResetPlayerWeapons(int playerid)
{
	p_HasWeapon[playerid].fill(false);
	WeaponProtection[playerid] = clock();
	return ResetPlayerWeapons(playerid);
}

int fixTogglePlayerControllable(int playerid, bool toggle)
{
	p_Frozen[playerid] = toggle;
	return TogglePlayerControllable(playerid, p_Frozen[playerid]);
}

int fixSetPlayerPos(int playerid, float fX, float fY, float fZ)
{
	p_AirBrkCheck[playerid].newX = fX;
	p_AirBrkCheck[playerid].newY = fY;
	p_AirBrkCheck[playerid].newZ = fZ;
	p_AirBrkCheck[playerid].lastX = p_AirBrkCheck[playerid].newX + 0.2f;
	p_AirBrkCheck[playerid].lastY = p_AirBrkCheck[playerid].newY + 0.2f;
	p_AirBrkCheck[playerid].lastZ = p_AirBrkCheck[playerid].newZ + 0.2f;
	teleportprot[playerid] = clock();
	return SetPlayerPos(playerid, fX, fY, fZ);
}

int fixSetPlayerPosFindZ(int playerid, float fX, float fY, float fZ)
{
	p_AirBrkCheck[playerid].newX = fX;
	p_AirBrkCheck[playerid].newY = fY;
	p_AirBrkCheck[playerid].newZ = fZ;
	p_AirBrkCheck[playerid].lastX = p_AirBrkCheck[playerid].newX + 0.2f;
	p_AirBrkCheck[playerid].lastY = p_AirBrkCheck[playerid].newY + 0.2f;
	p_AirBrkCheck[playerid].lastZ = p_AirBrkCheck[playerid].newZ + 0.2f;
	teleportprot[playerid] = clock();
	return SetPlayerPosFindZ(playerid, fX, fY, fZ);
}

int fixSetVehiclePos(int vehicleid, float fX, float fY, float fZ)
{
	if (v_PlayerInVehicle[vehicleid] != INVALID_PLAYER_ID)
	{
		p_AirBrkCheck[v_PlayerInVehicle[vehicleid]].newX = fX;
		p_AirBrkCheck[v_PlayerInVehicle[vehicleid]].newY = fY;
		p_AirBrkCheck[v_PlayerInVehicle[vehicleid]].newZ = fZ;
		p_AirBrkCheck[v_PlayerInVehicle[vehicleid]].lastX = p_AirBrkCheck[v_PlayerInVehicle[vehicleid]].newX + 0.2f;
		p_AirBrkCheck[v_PlayerInVehicle[vehicleid]].lastY = p_AirBrkCheck[v_PlayerInVehicle[vehicleid]].newY + 0.2f;
		p_AirBrkCheck[v_PlayerInVehicle[vehicleid]].lastZ = p_AirBrkCheck[v_PlayerInVehicle[vehicleid]].newZ + 0.2f;
		teleportprot[v_PlayerInVehicle[vehicleid]] = clock();
	}
	return SetVehiclePos(vehicleid, fX, fY, fZ);
}

int fixTogglePlayerSpectating(int playerid, bool toggle)
{
	p_IsSpectateAllowed[playerid] = toggle;
	return TogglePlayerSpectating(playerid, toggle);
}

void CheckSet(int ToCheck, int playerid, bool check)
{
	if (playerid == INVALID_PLAYER_ID)
	{
		if (check == 0)
		{
			g_SET_FALSE(ToCheck);
		}
		else
		{
			g_SET_TRUE(ToCheck);
		}
		return;
	}

	if (playerid < 0 || playerid >= MAX_PLAYERS)
	{
		return;
	}

	if (check == 0)
	{
		p_SET_FALSE(playerid, ToCheck);
	}
	else
	{
		p_SET_TRUE(playerid, ToCheck);
	}
}

void SetWeaponAllowed(int playerid, int weaponid, bool allowed)
{
	if (weaponid < 1 || weaponid >= 48)
	{
		return;
	}

	if (playerid == INVALID_PLAYER_ID)
	{
		if (allowed == 1)
		{
			g_WeaponEnabled[weaponid] = true;
		}
		else
		{
			g_WeaponEnabled[weaponid] = false;
		}
		return;
	}

	if (playerid < 0 || playerid >= MAX_PLAYERS)
	{
		return;
	}

	if (allowed == 1)
	{
		p_WeaponEnabled[playerid][weaponid] = true;
	}
	else
	{
		p_WeaponEnabled[playerid][weaponid] = false;
	}
}

int safeSetPlayerSpecialAction(int playerid, int action)
{
	if (action == SPECIAL_ACTION_USEJETPACK)
	{
		p_HasJetPack[playerid] = true;
	}
	return SetPlayerSpecialAction(playerid, action);
}

int fixSetPlayerHealth(int playerid, float health)
{
	PlayerHealth[playerid][0] = health;
	PlayerHealth[playerid][1] = health;
	if (PlayerHealth[playerid][2] > 0.0f)
	{
		PlayerHealth[playerid][2] = health;
		PlayerHealth[playerid][3] = health - 1;
	}
	else
	{
		PlayerHealth[playerid][3] = health;
	}
	return SetPlayerHealth(playerid, PlayerHealth[playerid][3]);
}

int fixSetPlayerArmour(int playerid, float armour)
{
	PlayerArmour[playerid][0] = armour;
	PlayerArmour[playerid][1] = armour;
	if (PlayerArmour[playerid][2] > 0.0f)
	{
		PlayerArmour[playerid][2] = armour;
		PlayerArmour[playerid][3] = armour - 1;
	}
	else
	{
		PlayerArmour[playerid][3] = armour;
	}
	return SetPlayerArmour(playerid, PlayerArmour[playerid][3]);
}

static void SAMPGDK_CALL TimerDelayCheckPlayerHealth(int timerid, void *param)
{
	int playerid = (int)param;
	if (Spawned[playerid])
	{
		static float floatval = 0.0f;
		GetPlayerHealth(playerid, &floatval);
		if (floatval > PlayerHealth[playerid][3])
		{
			Report(playerid, CHECK_HEALTHARMOUR, 2, 0.0f, 0);
		}

		if (floatval < PlayerHealth[playerid][2])
		{
			PlayerHealth[playerid][2] = floatval;
		}

		SetPlayerHealth(playerid, PlayerHealth[playerid][2]);
		PlayerHealth[playerid][2] = 0.0f;
	}
}

static void SAMPGDK_CALL TimerDelayCheckPlayerArmour(int timerid, void *param)
{
	int playerid = (int)param;
	if (Spawned[playerid])
	{
		static float floatval = 0.0f;
		GetPlayerArmour(playerid, &floatval);
		if (floatval > PlayerArmour[playerid][3])
		{
			Report(playerid, CHECK_HEALTHARMOUR, 3, 0.0f, 0);
		}

		if (floatval < PlayerArmour[playerid][2])
		{
			PlayerArmour[playerid][2] = floatval;
		}

		SetPlayerArmour(playerid, PlayerArmour[playerid][2]);
		PlayerArmour[playerid][2] = 0.0f;
	}
}

int AcCorrectPing(int playerid)
{
	int ping = GetPlayerPing(playerid);

	if (ping < 30)
	{
		ping = 30;
	}
	if (ping > 333)
	{
		ping = 333;
	}

	return ping;
}

void DelayCheckPlayerHealth(int playerid)
{
	sampgdk_SetTimerEx(AcCorrectPing(playerid) * 2, false, TimerDelayCheckPlayerHealth, (void*)playerid, nullptr);
}

void DelayCheckPlayerArmour(int playerid)
{
	sampgdk_SetTimerEx(AcCorrectPing(playerid) * 2, false, TimerDelayCheckPlayerArmour, (void*)playerid, nullptr);
}

int fixPutPlayerInVehicle(int playerid, int vehicleid, int seat)
{
	std::array<	float,3> POS;
	clock_t timenow = clock();
	GetVehiclePos(vehicleid, &POS[0], &POS[1], &POS[2]);
	fixSetPlayerPos(playerid, POS[0], POS[1], POS[2]);
	p_VehicleEnterTime[playerid] = timenow - (2 * g_MassTpDelay);
	p_AirBrkCheck[playerid].newX = POS[0];
	p_AirBrkCheck[playerid].newY = POS[1];
	p_AirBrkCheck[playerid].newZ = POS[2];
	p_AirBrkCheck[playerid].lastX = p_AirBrkCheck[playerid].newX + 0.2f;
	p_AirBrkCheck[playerid].lastY = p_AirBrkCheck[playerid].newY + 0.2f;
	p_AirBrkCheck[playerid].lastZ = p_AirBrkCheck[playerid].newZ + 0.2f;
	teleportprot[playerid] = timenow;
	p_IsInVehicle[playerid] = vehicleid;

	if (seat == 0)
	{
		p_IsInVehicleDriver[playerid] = vehicleid;
	}
	else
	{
		p_IsInVehicleDriver[playerid] = 0;
	}

	LastVehicleGodModeCheck[playerid] = teleportprot[playerid] - 15000;
	GetVehicleHealth(vehicleid, &VehicleHealth[vehicleid]);
	v_PlayerInVehicle[vehicleid] = playerid;
	return PutPlayerInVehicle(playerid, vehicleid, seat);
}

int safeSetVehicleHealth(int vehicleid, float health)
{
	VehicleHealth[vehicleid] = health;

	if (PlayerDoingVehGodModeCheck[v_PlayerInVehicle[vehicleid]])
	{
		VehicleHealthGodModeCheck[vehicleid] = VehicleHealth[vehicleid] + 1.0f;
	}

	return SetVehicleHealth(vehicleid, VehicleHealth[vehicleid]);
}

int safeRepairVehicle(int vehicleid)
{
	static int ret;
	ret = RepairVehicle(vehicleid);
	VehicleHealth[vehicleid] = 1000.0f;

	if (PlayerDoingVehGodModeCheck[v_PlayerInVehicle[vehicleid]])
	{
		VehicleHealthGodModeCheck[vehicleid] = VehicleHealth[vehicleid] + 1.0f;
	}

	return ret;
}

static void SAMPGDK_CALL TimerDelayCheckPlayerVehicleGodMode(int timerid, void *param)
{
	int playerid = (int)((unsigned int)param) & 0xFFFF;
	int vehicleid = (int)(((unsigned int)param) & 0xFFFF0000) >> 16;
	PlayerDoingVehGodModeCheck[playerid] = false;
	static float floatval = 0.0f;
	GetVehicleHealth(vehicleid, &floatval);
	if (Spawned[playerid])
	{
		if (vehicleid == p_IsInVehicleDriver[playerid])
		{ 
			if (!VehicleHealthProtection[vehicleid])
			{
				if (floatval > VehicleHealthGodModeCheck[p_IsInVehicleDriver[playerid]])
				{
					Report(playerid, CHECK_VEHICLE_GODMODE, vehicleid);
				}
				PlayerVehicleHealSafety[playerid] = clock() + AcCorrectPing(playerid) * 2;
			}
		}
	}
	VehicleHealth[vehicleid] = floatval + 1.0f;
	SetVehicleHealth(vehicleid, VehicleHealth[vehicleid]);
}

bool DelayCheckPlayerVehicleGodMode(int playerid)
{
	if (Player[playerid].CurrentVehicle && Player[playerid].CurrentVehicle != INVALID_VEHICLE_ID && !PlayerDoingVehGodModeCheck[playerid])
	{
		GetVehicleHealth(p_IsInVehicleDriver[playerid], &VehicleHealth[p_IsInVehicleDriver[playerid]]);
		void* params = (void*)((unsigned int)playerid | ((unsigned int)p_IsInVehicleDriver[playerid] << 16));
		PlayerDoingVehGodModeCheck[playerid] = true;

		VehicleHealthGodModeCheck[p_IsInVehicleDriver[playerid]] = VehicleHealth[p_IsInVehicleDriver[playerid]] - 1.0f;
		VehicleHealth[p_IsInVehicleDriver[playerid]] = VehicleHealthGodModeCheck[p_IsInVehicleDriver[playerid]];
		SetVehicleHealth(p_IsInVehicleDriver[playerid], VehicleHealth[p_IsInVehicleDriver[playerid]]);

		sampgdk_SetTimerEx(AcCorrectPing(playerid) * 2, false, TimerDelayCheckPlayerVehicleGodMode, params, nullptr);
		return true;
	}
	return false;
}

const unsigned long GETBOOL(std::string str)
{
	return std::bitset<32>(str).to_ulong();
}

bool IsValidObjectModel(int model)
{
	static unsigned long
		valid_model[] = //credits to Slice
	{
		//one bit for each object (~19,5k objects)
		GETBOOL("11111111111011111110110111111110"), GETBOOL("00000000001111111111111111111111"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("11111111111111111111111110000000"),
		GETBOOL("11100001001111111111111111111111"), GETBOOL("11110111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("00000001111000000111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111100011111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111011111"), GETBOOL("11111111111111111111111101111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111100000000000001111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111010111101111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111001111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("10000000000011111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111011111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111101011101111111111"), GETBOOL("11111111111111111111111111110111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111110011"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111100111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111011110111101111"),
		GETBOOL("10000000000000000000000000000000"), GETBOOL("00000010000010000000010011111111"),
		GETBOOL("00000000001000000100000000000000"), GETBOOL("11111111101101100101111000000000"),
		GETBOOL("01110000111111111111111111111011"), GETBOOL("00000000001111111111111111000000"),
		GETBOOL("10011111110000000000001111001100"), GETBOOL("11111111101111001100000000011110"),
		GETBOOL("00001110110111111100111111111111"), GETBOOL("11111111111111111111111111001110"),
		GETBOOL("11111000000011111111111111111111"), GETBOOL("11111111111111111110111101101011"),
		GETBOOL("01000000000000000111111101110111"), GETBOOL("11010111111111111111000001111100"),
		GETBOOL("11110011111111111111111001111111"), GETBOOL("01011111111111111111111111111111"),
		GETBOOL("01111110100001111011111010101011"), GETBOOL("10001001010101100100001000010000"),
		GETBOOL("10100000000000000001010000101010"), GETBOOL("00001000001111101010111100100000"),
		GETBOOL("11111111111111111111111010100001"), GETBOOL("00000000011111111111110101111111"),
		GETBOOL("00001111111111111111110000111100"), GETBOOL("11011110111111001111011011111011"),
		GETBOOL("11111111111001111111110011001110"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("01111111111111111111111110111111"), GETBOOL("01111000111111111111110111111111"),
		GETBOOL("00011100000000010000000000000111"), GETBOOL("00001111111100001000000000000000"),
		GETBOOL("10101111001001110111110011111000"), GETBOOL("01010101010101010110100000101011"),
		GETBOOL("01110111110101011111110100101001"), GETBOOL("01111111111100101110111011111011"),
		GETBOOL("11111111111111111100101111001000"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("00000000011111111111111111111111"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11111111000000000000000000000000"), GETBOOL("00010100101000001111111111111111"),
		GETBOOL("11111111101111011111111111000000"), GETBOOL("00111111111111111111111100000001"),
		GETBOOL("11110000000000000000000000000000"), GETBOOL("00000101010101010111111111111111"),
		GETBOOL("11110010110111000011111010000000"), GETBOOL("11111110111110000111110111010000"),
		GETBOOL("00000000000000011111111111111111"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11111111111111111111111111000000"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11011111111111111111111111111111"), GETBOOL("00000000000000000000000000000111"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("11010111111000000000000000000000"),
		GETBOOL("10110011001000101111111111111111"), GETBOOL("00011000010111010101011111010111"),
		GETBOOL("11011111111111111111010101111111"), GETBOOL("11111111111111100000000000000011"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111100000101111111"),
		GETBOOL("00000000000000000000000111111111"), GETBOOL("00011000000001111000000000000000"),
		GETBOOL("11111111111111100111100000000100"), GETBOOL("11110100011011111111110000000000"),
		GETBOOL("11111110001001111111110000000111"), GETBOOL("11111111110110000100101010101000"),
		GETBOOL("11111111111111111100000000000000"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11101011111011110011111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("00010001000001111100001111111111"), GETBOOL("00100000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("11111101000000000000000000000000"),
		GETBOOL("11110001110101000001111111111111"), GETBOOL("00000000000001101111010000010010"),
		GETBOOL("11111111111111111111111110000000"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11100001111100000111100000000000"), GETBOOL("11100110011111111101011111111011"),
		GETBOOL("00000000000000000000000100111001"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000100110000101100111111001100"),
		GETBOOL("11111111111110000000000000000000"), GETBOOL("00000000000001111111111111111111"),
		GETBOOL("11000001111111011100000110000000"), GETBOOL("00000111111101111111111111111111"),
		GETBOOL("00000000001000011110000111010010"), GETBOOL("00111000100111110011110000000000"),
		GETBOOL("00111111111110101000001001111110"), GETBOOL("00000000000000100001111100000000"),
		GETBOOL("11111111111111111111111100000000"), GETBOOL("01111111111111111111111111111111"),
		GETBOOL("01011100001111111110101111110111"), GETBOOL("11100010111111100000000000111111"),
		GETBOOL("11011000011000110011100011111001"), GETBOOL("01100110000011110001100000010000"),
		GETBOOL("00000111100000000000000000000100"), GETBOOL("00010111111101100011100001101010"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11111111101111111000000000000000"), GETBOOL("01111000000111100000000111111111"),
		GETBOOL("00000000011111110111111110111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("00000000101001101111111111111111"), GETBOOL("11111111111111111111111111111110"),
		GETBOOL("10100001000000111111111111111111"), GETBOOL("11111111111111111111111111111011"),
		GETBOOL("00000000000000000000000000000011"), GETBOOL("00000000000000100000000000000000"),
		GETBOOL("01110001111111010000000000010000"), GETBOOL("11111101111101100011011111111111"),
		GETBOOL("10000000011111111111110101010111"), GETBOOL("11011111100000010011001010110111"),
		GETBOOL("11010011101011111111111111111111"), GETBOOL("10101010000010010000001111111000"),
		GETBOOL("11111000101111100000111110010110"), GETBOOL("11111111100000000000000000000001"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("01111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111101111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00000000000001111111111111111111"),
		GETBOOL("00111000000000010001000000000010"), GETBOOL("00000000000011100000000000000000"),
		GETBOOL("00000000000000000000100000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11110101000000000000000000000000"), GETBOOL("00011111111000000101001000000111"),
		GETBOOL("11110000011110100011011101000000"), GETBOOL("01111110111111111111111111111111"),
		GETBOOL("10101000000111110100101111011100"), GETBOOL("11111111111111111111110000111010"),
		GETBOOL("00000000000000000000011111111111"), GETBOOL("11111111111111111111111111111110"),
		GETBOOL("00001000111111111111111111111111"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00001111111110000000001111111101"), GETBOOL("00111110000001111111101110100000"),
		GETBOOL("00001111111101111100011111000100"), GETBOOL("11101010111101010011000111110000"),
		GETBOOL("11101010000000000000000111010001"), GETBOOL("10001110110101100101000001110101"),
		GETBOOL("11000011111010101011111111111111"), GETBOOL("11010110101111110000000000111111"),
		GETBOOL("00011111111111111111111111010100"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("00111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("10000000001111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00000000000000111111111111111111"),
		GETBOOL("00000000000000000000000001000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00011111000000000000000000000000"),
		GETBOOL("00011111111111100111111111111111"), GETBOOL("00000011111111111111111111111110"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00101100000110000000000000010000"),
		GETBOOL("11100000111110000000001000000000"), GETBOOL("11111000000000011111111100000000"),
		GETBOOL("11010000111111101011111111111111"), GETBOOL("11001101010100011100011101000011"),
		GETBOOL("11111111111101010011110011100111"), GETBOOL("01000000000111111001101111111111"),
		GETBOOL("00000000111010111111110010000111"), GETBOOL("11111111111000000000001111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111011110111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("00000000000001100000001111111111"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11100000000000000000000000000000"), GETBOOL("00000000000000000000000000000001"),
		GETBOOL("11111111111111111111110000010000"), GETBOOL("00000111111111111111111111111111"),
		GETBOOL("11111111111111111110100000000000"), GETBOOL("11111111111111111111111110111111"),
		GETBOOL("00000011100001111111111111111111"), GETBOOL("00000000001100000000000000000000"),
		GETBOOL("01100110001011010000000000000000"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("00000111111111111111111111111111"), GETBOOL("00000000000000000000000011111110"),
		GETBOOL("11111111110100000000000000000000"), GETBOOL("00000000000000000111111111101011"),
		GETBOOL("01100000000000000000000110011100"), GETBOOL("11111111111111111111111111101010"),
		GETBOOL("11111100000000000111111111111111"), GETBOOL("00000000000000000000000001111111"),
		GETBOOL("11101111000000000000000000000000"), GETBOOL("11111110111111111111111111111111"),
		GETBOOL("11111111111111111111011111111111"), GETBOOL("11000000001000000000000011011001"),
		GETBOOL("11011111111111111111111111111111"), GETBOOL("11100000011000000000011111111110"),
		GETBOOL("00000000001111100011111111111111"), GETBOOL("00011110111111000000000000000000"),
		GETBOOL("11001111111100001001011111110100"), GETBOOL("00110001110001111000011101011110"),
		GETBOOL("00000000000000000000000001110110"), GETBOOL("11111111111111111100000000000000"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00111111111111111111111111111111"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("11000000000000000000000000000000"),
		GETBOOL("00000000000000011111111111111111"), GETBOOL("11101111111111110100001000000000"),
		GETBOOL("00001010000000001111111111111111"), GETBOOL("00001100000110011000000000000000"),
		GETBOOL("01010011111111111111111111000000"), GETBOOL("11000001111111111100000000000100"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11001111110000000000111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00001111111111111111111111011111"),
		GETBOOL("00000011100000000000111000100000"), GETBOOL("11111111111111111110000000100000"),
		GETBOOL("11111111111001111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("00000000000000000000000011111111"), GETBOOL("10000000000000000000000000000000"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111001111"),
		GETBOOL("00000000000000000111111000001111"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11110111100000000000000000000000"), GETBOOL("00111111111100001011111111111111"),
		GETBOOL("10110111101010010000000000000000"), GETBOOL("11010000111111110001011011101010"),
		GETBOOL("10000011100000101101001011010000"), GETBOOL("11111111111110000100000010111101"),
		GETBOOL("11110011011111110100001100011111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00000000000110011111111111111111"),
		GETBOOL("00001111100000000000000000000000"), GETBOOL("10000000000000001011111010000000"),
		GETBOOL("11100100000001111000000000000000"), GETBOOL("00000000000000000000000000000011"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111011"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00001110001111111101111001011011"),
		GETBOOL("00011110011000011100011000111100"), GETBOOL("11000000001011111111111110010001"),
		GETBOOL("01111111111111111101101111111111"), GETBOOL("00111111111111111010100001110010"),
		GETBOOL("01111111111000000100000001011000"), GETBOOL("00000000001110000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000111000000000000000"),
		GETBOOL("01000001000100000011101000000001"), GETBOOL("11001111100110110000000000111010"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("11111000000000000100000000000000"),
		GETBOOL("01000000001000000001111110111111"), GETBOOL("11111111111011100111000000000000"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00001111111111111111111111111111"),
		GETBOOL("11111111110000000000000000000000"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111100001111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("01111111101111011111111111111111"),
		GETBOOL("00100001000000000000000000000010"), GETBOOL("10110111011001100111011000001000"),
		GETBOOL("00000000001000000000000010000111"), GETBOOL("10000100000000011000001111100000"),
		GETBOOL("00000000000000000000000000000100"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("11111111111111111000000000000000"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11010111111111111111111111111101"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111100000011111111111111111111"),
		GETBOOL("11111111111111111111111111110011"), GETBOOL("11111111111111111111100011111111"),
		GETBOOL("11111111111111111000000111111111"), GETBOOL("11111111111111000011111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111110111111111"), GETBOOL("00000000111101111111111111101111"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("11111111111111100000000000000000"),
		GETBOOL("00000001111111111111111111111111"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111000000011111110111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111101111111111111111"), GETBOOL("00000111111111111111111111111111"),
		GETBOOL("00001111111111111111111111111111"), GETBOOL("01110100111101000100000111110000"),
		GETBOOL("10101000000000000000000000000001"), GETBOOL("00000000111101000000000000000011"),
		GETBOOL("00000000111111000000000000000000"), GETBOOL("00001001000111000000000000000000"),
		GETBOOL("00100010100000100000000000000000"), GETBOOL("11111111111110001100000000100100"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("01110000011101100011111001111010"),
		GETBOOL("11111000000000000000000000011110"), GETBOOL("11000001111101100000111111111111"),
		GETBOOL("00000000011111111111111111101110"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("11111111111111111111111100000000"),
		GETBOOL("11111110001111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("01010111111111111111111111111111"),
		GETBOOL("01010101010101010101010101010101"), GETBOOL("01010101000101010101010101010101"),
		GETBOOL("01010101010101010101010101010101"), GETBOOL("10101010101010000101010101010101"),
		GETBOOL("01111010111111111111111111111010"), GETBOOL("00000000111010101101100000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("10000000000000111100000000000000"),
		GETBOOL("11110000000000000000000000000101"), GETBOOL("11111111111111111111111011111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111101101101101100111111100001"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00000000000000000000000000011111"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000101011000000000000"), GETBOOL("01111011000000100000000000100000"),
		GETBOOL("11000011111111010000111111011000"), GETBOOL("11111011100011110110111001111001"),
		GETBOOL("11001101111111110110000111100111"), GETBOOL("00000101011110110000000001111110"),
		GETBOOL("11111111111111110000000000000000"), GETBOOL("11111111110111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00100011011111111111111111111111"),
		GETBOOL("00000000000000000000000000000001"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11111111000000000000000000000000"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("00000111111111111111111111111111"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("00000000001111111111111111111111"),
		GETBOOL("00000000010000000000000000000001"), GETBOOL("00000011100000000000000000000000"),
		GETBOOL("00000000000000000000001111101010"), GETBOOL("11111111111111110000000000000000"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("10111111111111111111111111111111"), GETBOOL("11111111111111111100111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("01111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111110011111111111"), GETBOOL("11101111111111111111000111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11111111111111111111111111111111"), GETBOOL("11111111111111111111111111111111"),
		GETBOOL("11110000000001111111111111111111"), GETBOOL("00001111111111111111111111111111"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00000000000000000000000000000000"),
		GETBOOL("00000000000000000000000000000000"), GETBOOL("00100000000000000000000000000000")
	};

	if (model > 19901)
	{
		return 0;
	}

	model -= 320;

	if (model < 0)
	{
		return 0;
	}

	return (valid_model[model >> 5] & (1 << (model & 0x1F)));
}

std::set<int> SafeHealAreas;
std::set<int> SafeSwimmingAreas;
std::set<int> SafeSpeedHackAreas;

class AntyCheatExtension : public Extension::Base
{
public:
	AntyCheatExtension() : Base(ExecutionPriorities::AntiCheat){}

	bool OnGameModeInit() override
	{
		g_WeaponEnabled.fill(true);
		PlayerCanHeal.fill(0);
		PlayerCanSwim.fill(0);

		for (int i = 0; i < MAX_PLAYERS; ++i)
		{
			p_HasWeapon[i].fill(false);
			p_HasWeapon[i][0] = true;

			p_WeaponEnabled[i].fill(true);
			p_SpawnInfoWeapons[i].fill(0);
		}

		VehicleHealth.fill(1000.0);

		g_SkinHasWeapon.fill({{ 0, 0, 0 }});

		v_PlayerInVehicle.fill(INVALID_PLAYER_ID);

		GivesParachute.fill(false);

		GivesParachute[417] = true;
		GivesParachute[425] = true;
		GivesParachute[447] = true;
		GivesParachute[460] = true;
		GivesParachute[469] = true;
		GivesParachute[476] = true;
		GivesParachute[487] = true;
		GivesParachute[488] = true;
		GivesParachute[497] = true;
		GivesParachute[511] = true;
		GivesParachute[512] = true;
		GivesParachute[513] = true;
		GivesParachute[519] = true;
		GivesParachute[520] = true;
		GivesParachute[553] = true;
		GivesParachute[548] = true;
		GivesParachute[563] = true;
		GivesParachute[577] = true;
		GivesParachute[592] = true;
		GivesParachute[593] = true;

		//ON:
		CheckSet(CHECK_JETPACK);
		CheckSet(CHECK_WEAPON);
		CheckSet(CHECK_WEAPON_AMMO);
		CheckSet(CHECK_IPFLOOD);
		CheckSet(CHECK_PING);
		CheckSet(CHECK_SPOOFKILL);
		CheckSet(CHECK_INACTIVITY);
		CheckSet(CHECK_TELEPORT);
		CheckSet(CHECK_AIRBREAK);
		CheckSet(CHECK_FASTCONNECT);
		CheckSet(CHECK_REMOTECONTROL);
		CheckSet(CHECK_CARJACKHACK);
		CheckSet(CHECK_VEHICLE_HEAL);
		CheckSet(CHECK_VEHICLE_GODMODE);
		CheckSet(CHECK_OBJECTEDIT_CRASH);

		//OFF:
		CheckSet(CHECK_SPEED, INVALID_PLAYER_ID, false);
		CheckSet(CHECK_HEALTHARMOUR, INVALID_PLAYER_ID, false);
		CheckSet(CHECK_SPAWNKILL, INVALID_PLAYER_ID, false);
		CheckSet(CHECK_BACK_FROM_INACTIVITY, INVALID_PLAYER_ID, false);
		CheckSet(CHECK_SPECTATE, INVALID_PLAYER_ID, false);
		CheckSet(CHECK_MASSCARTELEPORT, INVALID_PLAYER_ID, false);
		CheckSet(CHECK_FLYHACK, INVALID_PLAYER_ID, false);

		auto AddSafeHealArea = [&](float x, float y, float z)
		{ 
			SafeHealAreas.insert(StreamerLibrary::CreateDynamicCube((x)-10.0f, (y)-10.0f, (z)-10.0f, (x)+10.0f, (y)+10.0f, (z)+10.0f)); 
		};

		AddSafeHealArea(616.7820, -74.8151, 997.6350);
		AddSafeHealArea(615.2851, -124.2390, 997.6350);
		AddSafeHealArea(617.5380, -1.9900, 1000.6829);
		AddSafeHealArea(-1794.15, 1429.69, 4.37321);
		AddSafeHealArea(-1694.78, 1033.15, 44.1937);
		AddSafeHealArea(-2114.42, -2462.27, 29.4809);
		AddSafeHealArea(319.326, -1768.93, 3.35686);
		AddSafeHealArea(1968.23, 2157.88, 9.59696);
		AddSafeHealArea(2002.96, 2303.72, 9.61706);
		AddSafeHealArea(1408.65, 1899.52, 10.115);
		AddSafeHealArea(1269.2, 2525.14, 9.80013);
		AddSafeHealArea(929.554, 2008.59, 10.115);
		AddSafeHealArea(1038.24, -1025.67, 31.1027);
		AddSafeHealArea(-2112.48, -21.214, 34.303);
		AddSafeHealArea(783.155, -492.75, 16.3361);
		AddSafeHealArea(2227.6, 168.649, 26.4635);
		AddSafeHealArea(2738.4, -2012.55, 12.5759);
		AddSafeHealArea(1694.8, -2088.7, 12.3636);
		AddSafeHealArea(1352.58, -636.657, 108.135);
		AddSafeHealArea(715.806, -462.403, 14.9635);
		AddSafeHealArea(2502.31, -1699.36, 12.4323);
		AddSafeHealArea(-364.439, 1194.37, 18.597);
		AddSafeHealArea(430.059, 2542.31, 15.166);
		AddSafeHealArea(-103.636, 1112.42, 18.7017);
		AddSafeHealArea(-1424.11, 2576.61, 54.8156);
		AddSafeHealArea(383.843, 2433.28, 15.166);
		AddSafeHealArea(1873.97, -2096.55, 12.487);
		AddSafeHealArea(-2171.43, 649.416, 49.8742);
		AddSafeHealArea(-397.297, 2223.17, 41.3824);
		AddSafeHealArea(-2043.1, 118.609, 27.821);
		AddSafeHealArea(1523.92, -1653.23, 4.72837);
		AddSafeHealArea(-1652.78, 647.502, -6.04924);
		AddSafeHealArea(2218.06, 2448.06, -8.43807);
		AddSafeHealArea(1843.91, -1858.8, 12.3645);
		AddSafeHealArea(-2057.35, 150.803, 27.8286);
		AddSafeHealArea(-2728.53, 212.295, 3.45112);
		AddSafeHealArea(-1941.04, 251.714, 33.4274);
		AddSafeHealArea(-1790.97, 1209.71, 23.763);
		AddSafeHealArea(1809.46, -2150.67, 12.4283);
		AddSafeHealArea(1640.37, -1520.07, 12.5118);
		AddSafeHealArea(2640.78, -2049.99, 12.543);
		AddSafeHealArea(-2108.92, 886.553, 75.566);
		AddSafeHealArea(-2699.12, 821.489, 49.0042);
		AddSafeHealArea(2056.6, -1835.9, 12.5443);
		AddSafeHealArea(1021.81,-1018.71, 30.9081);
		AddSafeHealArea(491.103, -1747.55, 9.45516);
		AddSafeHealArea(-1908.93, 292.353, 40.0413);
		AddSafeHealArea(-2430.13, 1013.71, 49.3413);
		AddSafeHealArea(-2454.02, -131.556, 25.0886);
		AddSafeHealArea(-2735.46, 60.7331, 3.07005);
		AddSafeHealArea(2389.6, 1483.26, 9.81843);
		AddSafeHealArea(2382.28, 1044, 9.8337);
		AddSafeHealArea(2449.5, 695.018, 10.4742);
		AddSafeHealArea(2602.6, 1438.84, 9.8337);
		AddSafeHealArea(1550.98, 1155.36, 8.97329);

		auto AddSafeSwimmingArea = [&](float x1, float y1, float x2, float y2, float max_z)
		{ 
			SafeSwimmingAreas.insert(StreamerLibrary::CreateDynamicCube(std::min(x1, x2), std::min(y1, y2), -200.0, std::max(x1, x2), std::max(y1, y2), max_z)); 
		};
		
		//Credits go to Larceny : http://forum.sa-mp.com/member.php?u=243
		/*Las Venturas*/
		AddSafeSwimmingArea(2044.6, 1206.358, 2192.984, 1376.552, (float)0xA);
		AddSafeSwimmingArea(2048.504, 1063.239, 2185.174, 1202.49, (float)0xA);
		AddSafeSwimmingArea(2204.698, 1426.837, 2204.698, 1430.705, (float)0xA);
		AddSafeSwimmingArea(2032.885, 1852.325, 2114.887, 1991.575, (float)0xC);
		AddSafeSwimmingArea(2517.086, 2316.493, 2606.897, 2420.93, (float)0x16);
		AddSafeSwimmingArea(2554.5996, 1548.6178, 2507.7683, 1588.9154, (float)0xF);
		AddSafeSwimmingArea(-1419.5576, 1981.6162, -457.1841, 2834.4104, 50.0);
		/* San Fierro */
		AddSafeSwimmingArea(-2043.628, -980.9415, -1973.561, -724.0283, (float)0x20);
		AddSafeSwimmingArea(-2753.912, -522.3632, -2665.071, -380.3444, (float)0x05);
		/* Los Santos */
		AddSafeSwimmingArea(1219.864, -2435.881, 1292.118, -2325.344, (float)0xF);
		AddSafeSwimmingArea(1923.388, -1223.924, 2010.854, -1168.656, (float)0x16);
		AddSafeSwimmingArea(1269.301, -837.0452, 1314.935, -781.7769, (float)0x5A);
		AddSafeSwimmingArea(1087.3953, -682.6734, 1102.3138, -663.0043, (float)0x71);
		AddSafeSwimmingArea(1268.6118, -784.2910, 1291.8774, -764.6104, (float)0x43D);
		AddSafeSwimmingArea(172.0, -1249.0, 238.0, -1160.0, 85.0); //swimming pools

		/*
		 ______ _    _  _____ _  __  __  __ _______    _____ _    _ _____ _      _               _____	  !!!!
		|  ____| |  | |/ ____| |/ / |  \/  |__   __|  / ____| |  | |_   _| |    | |        /\   |  __ \	  !!!!
		| |__  | |  | | |    | ' /  | \  / |  | |    | |    | |__| | | | | |    | |       /  \  | |  | |  !!!!
		|  __| | |  | | |    |  <   | |\/| |  | |    | |    |  __  | | | | |    | |      / /\ \ | |  | |  !!!!
		| |    | |__| | |____| . \  | |  | |  | |_   | |____| |  | |_| |_| |____| |____ / ____ \| |__| |  
		|_|     \____/ \_____|_|\_\ |_|  |_|  |_(_)   \_____|_|  |_|_____|______|______/_/    \_\_____/	   !!
		*/
		auto AddSafeSpeedHackArea = [&](float x1, float y1, float x2, float y2)
		{
			SafeSpeedHackAreas.insert(StreamerLibrary::CreateDynamicRectangle(std::min(x1, x2), std::min(y1, y2), std::max(x1, x2), std::max(y1, y2))); 
		};
		//NOW ADD THIS FUCKING MOUNTAIN TO EXCEPTIONS BECAUSE IT ALWAYS CAUSES FALSE POSITIVES ON THE ANTI SPEED HACK
		AddSafeSpeedHackArea(-3200.0, -900.0, -1700.0, -2300.0);
		//Fuck the white house too.
		AddSafeSpeedHackArea(1002.0, -1846.0, 1352.0, -2378.0);
		//fuck the Radio
		AddSafeSpeedHackArea(-2882.0405, -866.2499, -2268.6938, -413.7147);
		//now if any more areas come here...: FUCK GTA.

		//jeez fuck handling.dat that's why this code below exists
		for (size_t i = 0; i < 612; ++i)
		{
			if (IsVehicleAirplane(i))
			{
				MaxVehicleSpeed[i] = 1000.0;
			}
			if (i == 403 || i == 514 || i == 515)
			{
				MaxVehicleSpeed[i] = 260.0;
			}
			if (i == 537 || i == 538 || i == 590 || i == 569 || i == 570)
			{
				MaxVehicleSpeed[i] = 550.0;
			}
		}
		MaxVehicleSpeed[476] = 1000.0;
		MaxVehicleSpeed[592] = 6969.6969;
		for (size_t i = 0; i < 612; ++i)
		{
			MaxVehicleSpeed[i] += 25.0;
		}
		return true;
	}
	bool OnPlayerWeaponShot(int playerid, int weaponid, int hittype, int hitid, float fX, float fY, float fZ) override
	{

		unsigned long long TimeNow = Functions::GetTime();
		unsigned long long diff = TimeNow - Player[playerid].LastShotTime;

		if (--Player[playerid].CurrentPendingOnWeaponShot < 0)
		{
			Player[playerid].CurrentPendingOnWeaponShot = 0;
		}

		if (
			fX < -10000.0 || fX > 10000.0 ||
			fY < -10000.0 || fY > 10000.0 ||
			fZ < -200.0 || fZ > 10000.0 || 
			!WeaponInfo[weaponid].AC_CanBulletSync ||
			!p_HasWeapon[playerid][weaponid] ||
			GetPlayerWeapon(playerid) != weaponid ||
			diff < WeaponInfo[weaponid].min_time_absolut_possible
		){
			debug_fixSendClientMessage(playerid, "OnPlayerWeaponShot | Action->Block(\"Bullet Hack?\");");
			debug_fixSendClientMessage(playerid, Functions::string_format("%d %d %d %d %d %d %d %d %d %d %d %d %d [%d %d %d] DIFF: %I64u ms TOTDIF: %I64u ms ", 
				fX < -10000.0, fX > 10000.0,
				fY < -10000.0, fY > 10000.0,
				fZ < -200.0, fZ > 10000.0,
				!WeaponInfo[weaponid].AC_CanBulletSync,
				!Player[playerid].weapondata.weapon[weaponid].Owned,
				!Player[playerid].weapondata.weapon[weaponid].Ammo,
				Player[playerid].weapondata.equipped[WeaponInfo[weaponid].category] != (unsigned int)weaponid,
				GetPlayerWeapon(playerid) != weaponid,
				diff < WeaponInfo[weaponid].min_time_absolut_possible,
				Player[playerid].DiffShotTimes.total_count() < WeaponInfo[weaponid].min_time_between_serie,
				WeaponInfo[weaponid].category,
				Player[playerid].weapondata.equipped[WeaponInfo[weaponid].category],
				WeaponInfo[weaponid].weaponid,
				diff,
				Player[playerid].DiffShotTimes.total_count()
				));

			return false;//NOP cheater data, BYE FUCKTARD, no weaponz haxorz CL30 L0L HAHA
		}

		Player[playerid].LastShotTime = TimeNow;

		Player[playerid].DiffShotTimes.push_new(diff);

		if (Player[playerid].DiffShotTimes.total_count() < WeaponInfo[weaponid].min_time_between_serie)
		{
			debug_fixSendClientMessage(playerid, "OnPlayerWeaponShot | Action->Block(\"Bullet Hack?\"); DiffShotTimes");
			return false;//NOP cheater data, BYE FUCKTARD, no weaponz haxorz CL30 L0L HAHA
		}
		return p_Frozen[playerid];
	}
	bool OnPlayerText(int playerid, std::string text) override
	{
		if (UseChatForInactivityMeasurement)
		{
			p_AcivityInfo[playerid].LastActive = clock();
			p_AcivityInfo[playerid].LastTick = p_AcivityInfo[playerid].LastActive;
			if (p_AcivityInfo[playerid].Reported)
			{
				Report(playerid, CHECK_BACK_FROM_INACTIVITY);
			}
			p_AcivityInfo[playerid].Reported = false;
		}
		return true;
	}

	bool OnVehicleSpawn(int vehicleid) override
	{
		GetVehicleHealth(vehicleid,&VehicleHealth[vehicleid]);
		return true;
	}
	bool OnEnterExitModShop(int playerid, int enterexit, int interiorid) override
	{
		if (p_IsInVehicleDriver[playerid] != INVALID_VEHICLE_ID)
		{
			GetVehicleHealth(p_IsInVehicleDriver[playerid], &VehicleHealth[p_IsInVehicleDriver[playerid]]);
			VehicleHealthProtection[p_IsInVehicleDriver[playerid]] = (bool)enterexit;
		}
		return true;
	}
	bool OnVehicleRespray(int playerid, int vehicleid, int color1, int color2) override
	{
		VehicleHealth[vehicleid] = 1000.0f;
		return true;
	}
	bool OnVehicleDeath(int vehicleid, int killerid) override
	{
		return true;
	}
	bool OnPlayerConnect(int playerid) override
	{
		boost::asio::ip::address_v4 playerip(boost::asio::ip::address_v4::from_string(_GetPlayerIP(playerid)));
		clock_t timenow = clock();
		PlayerCanHeal[playerid] = 0;
		PlayerCanSwim[playerid] = 0;
		p_CanPlayerSpeedHack[playerid] = 0;
		auto foundip = IPLastConnectTime.find(playerip.to_ulong());
		if (foundip == IPLastConnectTime.end())
		{
			IPLastConnectTime[playerip.to_ulong()] = timenow;
		}
		else
		{
			if ((timenow - foundip->second) < g_IPConnectDelay)
			{
				Report(playerid, CHECK_FASTCONNECT, (int)playerip.to_ulong());
			}
			foundip->second = timenow;
		}
		p_Frozen[playerid] = true;
		if (!IsPlayerNPC(playerid))
		{
			p_WeaponEnabled[playerid] = g_WeaponEnabled;
			PlayerDoingVehGodModeCheck[playerid] = false;
			p_AcivityInfo[playerid].LastActive = timenow;
			p_AcivityInfo[playerid].LastTick = p_AcivityInfo[playerid].LastActive;
			p_AcivityInfo[playerid].Reported = false;
			p_HasJetPack[playerid] = false;
			p_VehicleEnterTime[playerid] = p_AcivityInfo[playerid].LastTick;
			p_IsSpectateAllowed[playerid] = false;
			safeSetSpawnInfo(playerid, NO_TEAM, 0, 0.0f, 0.0f, 0.0f, 0.0f, 0, 0, 0, 0, 0, 0);
			DisablePlayerCheckpoint(playerid);
			DisablePlayerRaceCheckpoint(playerid);
			PlayerHealth[playerid][0] = 0.0f;
			PlayerHealth[playerid][1] = 0.0f;
			PlayerHealth[playerid][2] = 0.0f;
			PlayerArmour[playerid][0] = 0.0f;
			PlayerArmour[playerid][1] = 0.0f;
			PlayerArmour[playerid][2] = 0.0f;
			p_CheckForStuff[playerid] = (unsigned long)-1;

			p_SpeedHackLowVal[playerid] = 1.0f;
			p_SpeedHackLowValCheck[playerid] = p_AcivityInfo[playerid].LastActive;

			auto connected_ips = ConnectedIPs.find(playerip.to_ulong());
			if (connected_ips != ConnectedIPs.end())
			{
				if (++connected_ips->second > g_max_ip)
				{
					Report(playerid, CHECK_IPFLOOD, (int)playerip.to_ulong());
				}
			}
			else
			{
				auto inserted = ConnectedIPs.insert(std::pair<unsigned long, unsigned short>(playerip.to_ulong(), 1));
				if (inserted.first->second > g_max_ip)
				{
					Report(playerid, CHECK_IPFLOOD, (int)playerip.to_ulong());
				}
			}
		}
		return true;
	}

	bool OnPlayerDisconnect(int playerid, int reason) override
	{
		if (!IsPlayerNPC(playerid))
		{
			Spawned[playerid] = false;

			unsigned long pip = Player[playerid].ipv4.to_ulong();
			auto foundconnip = ConnectedIPs.find(pip);
			if (foundconnip != ConnectedIPs.end())
			{
				if (--foundconnip->second <= 0)
				{
					ConnectedIPs.erase(foundconnip);
					IPLastConnectTime.erase(pip);
				}
			}
			p_HasWeapon[playerid].fill(false);
			safeResetPlayerWeapons(playerid);
			PlayerHealth[playerid][0] = 0.0f;
			PlayerHealth[playerid][1] = 0.0f;
			PlayerArmour[playerid][0] = 0.0f;
			PlayerArmour[playerid][1] = 0.0f;

		}
		return true;
	}
	bool OnPlayerExitVehicle(int playerid, int vehicleid) override
	{
		if (v_PlayerInVehicle[vehicleid] != INVALID_PLAYER_ID)
		{
			GetVehicleHealth(v_PlayerInVehicle[vehicleid], &VehicleHealth[v_PlayerInVehicle[vehicleid]]);
			v_PlayerInVehicle[vehicleid] = INVALID_PLAYER_ID;
		}
		return true;
	}
	bool OnPlayerEnterDynamicArea(int playerid, int areaid) override
	{ 
		if (SafeHealAreas.find(areaid) != SafeHealAreas.end())
		{
			debug_fixSendClientMessage(playerid, "++PlayerCanHeal");
			++PlayerCanHeal[playerid];
		}
		else if (SafeSwimmingAreas.find(areaid) != SafeSwimmingAreas.end())
		{
			debug_fixSendClientMessage(playerid, "++PlayerCanSwim");
			++PlayerCanSwim[playerid];
		}
		else if (SafeSpeedHackAreas.find(areaid) != SafeSpeedHackAreas.end())
		{
			debug_fixSendClientMessage(playerid, "++p_CanPlayerSpeedHack");
			++p_CanPlayerSpeedHack[playerid];
		}
		return true; 
	}
	bool OnPlayerLeaveDynamicArea(int playerid, int areaid) override
	{
		if (SafeHealAreas.find(areaid) != SafeHealAreas.end())
		{
			debug_fixSendClientMessage(playerid, "--PlayerCanHeal");
			if (--PlayerCanHeal[playerid] < 0)
			{
				PlayerCanHeal[playerid] = 0;
			}
			GetVehicleHealth(p_IsInVehicleDriver[playerid], &VehicleHealth[p_IsInVehicleDriver[playerid]]);
		}else if (SafeSwimmingAreas.find(areaid) != SafeSwimmingAreas.end())
		{
			debug_fixSendClientMessage(playerid, "--PlayerCanSwim");
			if (--PlayerCanSwim[playerid] < 0)
			{
				PlayerCanSwim[playerid] = 0;
			}
		}else if (SafeSpeedHackAreas.find(areaid) != SafeSpeedHackAreas.end())
		{
			debug_fixSendClientMessage(playerid, "--p_CanPlayerSpeedHack");
			if (--p_CanPlayerSpeedHack[playerid] < 0)
			{
				p_CanPlayerSpeedHack[playerid] = 0;
			}
		}
		return true; 
	}
	bool OnPlayerEditAttachedObject(int playerid, int response, int index, int modelid, int boneid, float fOffsetX, float fOffsetY, float  fOffsetZ, float fRotX, float fRotY, float  fRotZ, float  fScaleX, float fScaleY, float fScaleZ) override
	{
		//credits go to Kurta999 for this
		if (!IsValidObjectModel(modelid))
		{
			Report(playerid, CHECK_OBJECTEDIT_CRASH);
			return false;
		}
		return true;
	}
	void ProcessTick() override
	{
		if (g_Ticked == g_TickMax)
		{
			int playerid = 0;

			clock_t timenow = clock();
			for (auto i : PlayersOnline)
			{
				playerid = i;

				int playerstate = GetPlayerState(playerid);
				int vid = p_IsInVehicle[playerid];
				int dvid = 0;

				if (playerstate == PLAYER_STATE_DRIVER)
				{
					dvid = vid;
				}

				int NowInterior = GetPlayerInterior(playerid);
				clock_t CurrentInactiveTime = timenow - p_AcivityInfo[playerid].LastActive;
				std::array<float, 3> VEL;
				std::array<float, 3> POS;
				if (vid)
				{
					GetVehiclePos(vid,      &POS[0], &POS[1], &POS[2]);
					GetVehicleVelocity(vid, &VEL[0], &VEL[1], &VEL[2]);
				}
				else
				{
					GetPlayerPos(playerid, &POS[0], &POS[1], &POS[2]);
					GetPlayerVelocity(playerid, &VEL[0], &VEL[1], &VEL[2]);
				}

				if (g_IS_TRUE(CHECK_INACTIVITY))
				{
					if (p_IS_TRUE(playerid, CHECK_INACTIVITY))
					{
						if (p_AcivityInfo[playerid].Reported == false)
						{
							Player[playerid].CurrentInactivityTime = CurrentInactiveTime;
							if (CurrentInactiveTime > AllowedInactivityTime)
							{
								p_AcivityInfo[playerid].Reported = true;
								Report(playerid, CHECK_INACTIVITY);
								continue;
							}
						}
					}
				}
				if (g_IS_TRUE(CHECK_PING))
				{
					if (p_IS_TRUE(playerid, CHECK_PING))
					{
						if (GetPlayerPing(playerid) > g_max_ping)
						{
							Report(playerid, CHECK_PING);
							continue;
						}
					}
				}
				if (g_IS_TRUE(CHECK_JETPACK))
				{
					if (p_IS_TRUE(playerid, CHECK_JETPACK) && Spawned[playerid])
					{
						if (p_HasJetPack[playerid] == false)
						{
							if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
							{
								Report(playerid, CHECK_JETPACK);
								continue;
							}
						}
					}
				}
				if (g_IS_TRUE(CHECK_SPEED))
				{
					if (p_IS_TRUE(playerid, CHECK_SPEED) && Spawned[playerid] && !p_CanPlayerSpeedHack[playerid])
					{
						if (playerstate == PLAYER_STATE_DRIVER && v_PlayerInVehicle[vid] == playerid)
						{
							if (timenow > (teleportprot[playerid] + 1000))
							{
								float velXY = sqrt(VEL[0] * VEL[0] + VEL[1] * VEL[1]) + 0.000001f;
								static const float G = 10.0f;//9.81
								float velZ = VEL[2];
								float SpeedMult = pow(1.0 - ((atan(abs(velZ) / velXY)*RAD_TO_DEG) / 90.0), 1.5);
								if (SpeedMult > 0.7f &&
									((SpeedMult*sqrt(velXY*velXY + velZ*velZ))*180.0f 
									> 
									(MaxVehicleSpeed[GetVehicleModel(vid)] + 20.00f))
								)
								{
									if (SpeedMult - p_SpeedHackLowValCheck[playerid] < 0.25f)
									{
										Report(playerid, CHECK_SPEED, vid);
									}
									continue;
								}
							}
						}
					}
				}
				if (g_IS_TRUE(CHECK_AIRBREAK) || g_IS_TRUE(CHECK_TELEPORT))
				{
					if ((p_IS_TRUE(playerid, CHECK_AIRBREAK) || g_IS_TRUE(CHECK_TELEPORT)) && Spawned[playerid])
					{
						static float SPEEDx = 0.0f;
						static float SPEEDu = 0.0f;
						float diff = (float)(timenow - p_AirBrkCheck[playerid].LastMeasured);
							
						p_AirBrkCheck[playerid].LastMeasured = timenow;
						p_AirBrkCheck[playerid].newX = POS[0];
						p_AirBrkCheck[playerid].newY = POS[1];
						p_AirBrkCheck[playerid].newZ = POS[2];
						bool _continue = GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID && GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID;
						if (_continue)
						{
							switch (playerstate)
							{
							case PLAYER_STATE_ONFOOT:
							case PLAYER_STATE_DRIVER:
								float velXY = sqrt(VEL[0] * VEL[0] + VEL[1] * VEL[1]);
								float velZ = VEL[2];
								float SpeedMult = ((1.0 - ((atan(velZ / velXY)*RAD_TO_DEG) / 90.0)));//0...1
								SPEEDx = SpeedMult*((sqrt(pow(p_AirBrkCheck[playerid].newX - p_AirBrkCheck[playerid].lastX, 2.0) + pow(p_AirBrkCheck[playerid].newY - p_AirBrkCheck[playerid].lastY, 2.0)) / (diff + 0.00001f))*1000.0f) + 0.001f;
								SPEEDu = (sqrt(VEL[0] * VEL[0] + VEL[1] * VEL[1])*51.05f) + 0.5f;

								int Distortion_Ratio = (int)((SPEEDx / SPEEDu));
								float max_range = (SPEEDx > (vid ? 75.0f : 20.0f) ? (vid ? 75.0f : 20.0f) : SPEEDx);
								float distXY = (10.0*sqrt(pow(p_AirBrkCheck[playerid].newX - p_AirBrkCheck[playerid].lastX, 2.0) + pow(p_AirBrkCheck[playerid].newY - p_AirBrkCheck[playerid].lastY, 2.0))) + 0.001f;
								float Distiortion_Ratio2 = (distXY / max_range);
								static bool check = false;
								if (vid)
								{
									check = Distortion_Ratio > 400 && Distiortion_Ratio2 > 1.35f;
								}
								else
								{
									check = Distortion_Ratio > 10 && Distiortion_Ratio2 > 4.0f;
								}
								if (timenow > (teleportprot[playerid] + 1000) && check)
								{
									//prevent transfender detection
									if (
										(LastInterior[playerid] == 0 && (NowInterior == 3 || NowInterior == 2 || NowInterior == 1)) 
										|| 
										(NowInterior == 0 && (LastInterior[playerid] == 3 || LastInterior[playerid] == 2 || LastInterior[playerid] == 1))
									){}else
									{
										if (distXY > 650.0f)
										{
											Report(playerid, CHECK_AIRBREAK, 100, SPEEDx);
										}
										else
										{
											Report(playerid, CHECK_TELEPORT, 100, SPEEDx);
										}
									}
								}
							}
						}
						else
						{
							teleportprot[playerid] = timenow;
						}
						LastInterior[playerid] = NowInterior;
						p_AirBrkCheck[playerid].lastX = p_AirBrkCheck[playerid].newX;
						p_AirBrkCheck[playerid].lastY = p_AirBrkCheck[playerid].newY;
						p_AirBrkCheck[playerid].lastZ = p_AirBrkCheck[playerid].newZ;
					}
				}
				if (g_IS_TRUE(CHECK_SPECTATE))
				{
					if (p_IS_TRUE(playerid, CHECK_SPECTATE) && Spawned[playerid])
					{
						if (playerstate == PLAYER_STATE_SPECTATING)
						{
							if (p_IsSpectateAllowed[playerid] == false)
							{
								Report(playerid, CHECK_SPECTATE);
							}
						}
					}
				}
				if (g_IS_TRUE(CHECK_WEAPON))
				{
					if (p_IS_TRUE(playerid, CHECK_WEAPON) && Spawned[playerid])
					{
						clock_t resetprotection = timenow - WeaponProtection[playerid];
						if (CurrentInactiveTime < 1000)
						{
							if (playerstate == PLAYER_STATE_ONFOOT)
							{
								for (int i = 0; i < 13; ++i)
								{
									int weapon;
									int ammo;
									GetPlayerWeaponData(playerid, i, &weapon, &ammo);
									if (weapon > 0 && weapon != 40 && ammo > 0 && weapon < 48 && weapon != 46)
									{
										if (g_WeaponEnabled[weapon] == true)
										{
											if (p_WeaponEnabled[playerid][weapon] == true)
											{
												if (p_HasWeapon[playerid][weapon] == false)
												{
													if (resetprotection > 3000)
													{
														Report(playerid, CHECK_WEAPON, weapon, 0);
														break;
													}
													else
													{
														//give the weapon... afk = reports no changes, we have to trust on this one :/
														p_HasWeapon[playerid][weapon] = true;
													}
												}
											}
											else
											{
												Report(playerid, CHECK_WEAPON, weapon, 1);
												break;
											}
										}
										else
										{
											Report(playerid, CHECK_WEAPON, weapon, 1);
											break;
										}
									}
								}
							}
							else if (playerstate == PLAYER_STATE_DRIVER || playerstate == PLAYER_STATE_PASSENGER)
							{
								int weapon = GetPlayerWeapon(playerid);
								if (weapon > 0 && weapon != 40 && weapon < 48 && weapon != 46)
								{
									if (g_WeaponEnabled[weapon] == true)
									{
										if (p_WeaponEnabled[playerid][weapon] == true)
										{
											if (p_HasWeapon[playerid][weapon] == false)
											{
												//sorry (l)user, no more protection for you
												if (resetprotection > 3000)
												{
													Report(playerid, CHECK_WEAPON, weapon, 0);
													break;
												}
												else
												{
													//give the weapon... afk = reports no changes, we have to trust on this one :/
													p_HasWeapon[playerid][weapon] = true;
												}
											}
										}
										else
										{
											Report(playerid, CHECK_WEAPON, weapon, 1);
											break;
										}
									}
									else
									{
										Report(playerid, CHECK_WEAPON, weapon, 1);
										break;
									}
								}
							}
						}
					}
				}
				if (g_IS_TRUE(CHECK_FLYHACK))
				{
					if (p_IS_TRUE(playerid, CHECK_FLYHACK))
					{
						if (POS[2] > 15.0 && !vid)
						{
							if (PlayerCanSwim[playerid] == 0)
							{
								p_LastAnimation[playerid] = GetPlayerAnimationIndex(playerid);
								switch (p_LastAnimation[playerid])
								{
								case 1538:
								case 1539:
								case 1543:
									Report(playerid, CHECK_FLYHACK);
									break;
								}
							}
						}
					}
				}
				if (g_IS_TRUE(CHECK_HEALTHARMOUR))//hates laggs, don't use for kicking
				{
					if (p_IS_TRUE(playerid, CHECK_HEALTHARMOUR) && Spawned[playerid])
					{
						static float floatval;
						{
							GetPlayerHealth(playerid, &floatval);
							if (floatval > PlayerHealth[playerid][0])
							{
								PlayerHealth[playerid][0] = floatval;
								Report(playerid, CHECK_HEALTHARMOUR, 0);
							}
							else if (floatval > PlayerHealth[playerid][1] && floatval > 0.0f && PlayerHealth[playerid][2] == 0.0f)
							{
								PlayerHealth[playerid][0] = floatval;
								PlayerHealth[playerid][1] = floatval;
								PlayerHealth[playerid][2] = floatval;
								PlayerHealth[playerid][3] = floatval - 1.0;
								SetPlayerHealth(playerid, PlayerHealth[playerid][3]);
								DelayCheckPlayerHealth(playerid);
							}
						}
						{
							GetPlayerArmour(playerid, &floatval);
							if (floatval > PlayerArmour[playerid][0])
							{
								PlayerArmour[playerid][0] = floatval;
								Report(playerid, CHECK_HEALTHARMOUR, 1);
							}
							else if (floatval > PlayerArmour[playerid][1] && floatval > 0.0f && PlayerArmour[playerid][2] == 0.0f)
							{
								PlayerArmour[playerid][0] = floatval;
								PlayerArmour[playerid][1] = floatval;
								PlayerArmour[playerid][2] = floatval;
								PlayerArmour[playerid][3] = floatval - 1.0;
								SetPlayerArmour(playerid, PlayerArmour[playerid][3]);
								DelayCheckPlayerArmour(playerid);
							}
						}
					}
				}
				if (g_IS_TRUE(CHECK_VEHICLE_HEAL))//works somewhat better than the ped anti heal hack but still - don't kick.
				{
					if (p_IS_TRUE(playerid, CHECK_VEHICLE_HEAL) && Spawned[playerid])
					{
						if (vid && playerstate == PLAYER_STATE_DRIVER)
						{
							if (!VehicleHealthProtection[vid] && PlayerCanHeal[playerid] == 0 && !PlayerDoingVehGodModeCheck[playerid] && timenow > PlayerVehicleHealSafety[playerid])
							{
								if (timenow > NextVehicleHealCheck[playerid])
								{
									static float Vheal;
									GetVehicleHealth(vid, &Vheal);
									if (VehicleHealth[vid] < Vheal)
									{
										SetVehicleHealth(vid, VehicleHealth[vid]);
										Report(playerid, CHECK_VEHICLE_HEAL, vid);
									}
									else
									{
										if (Vheal < VehicleHealth[vid])
										{
											___OnVehicleLostHealth(playerid,vid,VehicleHealth[vid], Vheal);
										}
										VehicleHealth[vid] = Vheal;
									}
									NextVehicleHealCheck[playerid] = (clock_t)((double)AcCorrectPing(playerid)*1.5) + timenow;
								}
							}
						}
					}
				}
				if (g_IS_TRUE(CHECK_VEHICLE_GODMODE))//no comment.. needs to be improved, HATES LAGGS!
				{
					if (p_IS_TRUE(playerid, CHECK_VEHICLE_GODMODE) && Spawned[playerid])
					{
						if (vid && playerstate == PLAYER_STATE_DRIVER)
						{
							if (!VehicleHealthProtection[vid] && !PlayerDoingVehGodModeCheck[playerid])
							{
								if (timenow - LastVehicleGodModeCheck[playerid] > 20000)
								{
									if (timenow - p_AcivityInfo[playerid].LastActive < 1000)
									{
										if (DelayCheckPlayerVehicleGodMode(playerid))
										{
											LastVehicleGodModeCheck[playerid] = timenow;
										}
									}
								}
							}
						}
					}
				}
			}
			g_Ticked = -1;
		}
		g_Ticked += 1;
	}
	
	bool OnPlayerTakeDamage(int playerid, int issuerid, float amount, int weaponid, int bodypart) override
	{
		if (issuerid == INVALID_PLAYER_ID)
		{
			if (PlayerArmour[playerid][1] > 0.0f)
			{
				PlayerArmour[playerid][1] -= amount;
				if (PlayerArmour[playerid][1] < 0.0f)
				{
					PlayerHealth[playerid][1] += PlayerArmour[playerid][0];
					PlayerArmour[playerid][1] = 0.0f;
				}
			}
			else
			{
				PlayerHealth[playerid][1] -= amount;
			}
			if (PlayerHealth[playerid][1] < 0.0f)
			{
				PlayerHealth[playerid][1] = 0.0f;
			}
		}
		if (PlayerArmour[playerid][0] > 0.0f)
		{
			PlayerArmour[playerid][0] -= amount;
			if (PlayerArmour[playerid][0] < 0.0f)
			{
				PlayerHealth[playerid][0] += PlayerArmour[playerid][0];
				PlayerArmour[playerid][0] = 0.0f;
			}
		}
		else
		{
			PlayerHealth[playerid][0] -= amount;
		}
		if (PlayerHealth[playerid][0] < 0.0f)
		{
			PlayerHealth[playerid][0] = 0.0f;
		}
		return true;
	}

	bool OnPlayerGiveDamage(int playerid, int damagedid, float amount, int weaponid, int bodypart) override
	{
		if (weaponid < 48)
		{
			p_HasBeenHitByWeapon[damagedid][playerid][weaponid] = true;
		}

		if (PlayerArmour[damagedid][1] > 0.0f)
		{
			PlayerArmour[damagedid][1] -= amount;
			if (PlayerArmour[damagedid][1] < 0.0f)
			{
				PlayerHealth[damagedid][1] += PlayerArmour[damagedid][0];
				PlayerArmour[damagedid][1] = 0.0f;
			}
		}
		else
		{
			PlayerHealth[damagedid][1] -= amount;
		}

		if (PlayerHealth[damagedid][1] < 0.0f)
		{
			PlayerHealth[damagedid][1] = 0.0f;
		}
		return true;
	}

	bool OnPlayerUpdate(int playerid) override
	{
		clock_t timenow = clock();
		if (g_IS_TRUE(CHECK_INACTIVITY))
		{
			if (p_IS_TRUE(playerid, CHECK_INACTIVITY))
			{
				if (timenow - p_AcivityInfo[playerid].LastTick < 300)
				{
					p_AcivityInfo[playerid].LastActive = timenow;
					if (p_AcivityInfo[playerid].Reported == true)
					{
						Report(playerid, CHECK_BACK_FROM_INACTIVITY);
						p_AcivityInfo[playerid].Reported = false;
						p_AcivityInfo[playerid].LastTick = timenow;
						return p_Frozen[playerid];
					}
					p_AcivityInfo[playerid].Reported = false;
				}
				p_AcivityInfo[playerid].LastTick = timenow;
			}
		}
		//Credits go to Sasuke78200 for explaining me why so, and how to detect this kind of cheats
		if (g_IS_TRUE(CHECK_REMOTECONTROL))//also kicks teleport--to-vehicle-seat hackers
		{
			OPUvid = GetPlayerVehicleID(playerid);
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && p_IsInVehicleDriver[playerid] != OPUvid)
			{
				Report(playerid, CHECK_REMOTECONTROL, v_PlayerInVehicle[OPUvid]);
			}
		}
		return p_Frozen[playerid];
	}

	bool OnPlayerStateChange(int playerid, int newstate, int oldstate) override
	{
		clock_t timenow = clock();
		p_IsInVehicle[playerid] = GetPlayerVehicleID(playerid);
		if (newstate == PLAYER_STATE_DRIVER)
		{
			p_IsInVehicleDriver[playerid] = p_IsInVehicle[playerid];
			if (GivesParachute[GetVehicleModel(GetPlayerVehicleID(playerid))])
			{
				p_HasWeapon[playerid][46] = true;
				p_WeaponEnabled[playerid][46] = true;
			}
			v_PlayerInVehicle[p_IsInVehicleDriver[playerid]] = playerid;
			VehicleHealthProtection[p_IsInVehicleDriver[playerid]] = false;
			LastVehicleGodModeCheck[playerid] = timenow - 15000;
			if (g_IS_TRUE(CHECK_MASSCARTELEPORT))
			{
				if (oldstate == PLAYER_STATE_DRIVER)
				{
					if ((timenow - p_VehicleEnterTime[playerid]) < g_MassTpDelay && (teleportprot[playerid] + 2000) < timenow)
					{
						p_VehicleEnterTime[playerid] = timenow;
						Report(playerid, CHECK_MASSCARTELEPORT);
						return true;
					}
				}
				p_VehicleEnterTime[playerid] = timenow;
			}
			if (g_IS_TRUE(CHECK_CARJACKHACK) && (teleportprot[playerid] + 2000) < timenow)
			{
				for (auto i : PlayersOnline)
				{
					if (p_IsInVehicleDriver[playerid] == p_IsInVehicle[i] && GetPlayerState(i) == PLAYER_STATE_ONFOOT)
					{
						Report(playerid, CHECK_CARJACKHACK, i);
						return true;
					}
				}
			}
			teleportprot[playerid] = timenow;
		}
		else
		{
			p_IsInVehicleDriver[playerid] = 0;
			teleportprot[playerid] = timenow;
			if (p_IsInVehicle[playerid] != 0)
			{
				if (v_PlayerInVehicle[p_IsInVehicle[playerid]] == playerid)
				{
					v_PlayerInVehicle[p_IsInVehicle[playerid]] = INVALID_VEHICLE_ID;
				}
				p_IsInVehicle[playerid] = 0;
			}
			if (g_IS_TRUE(CHECK_MASSCARTELEPORT))
			{
				if (oldstate == PLAYER_STATE_DRIVER)
				{
					if ((timenow - p_VehicleEnterTime[playerid]) < g_MassTpDelay)
					{
						Report(playerid, CHECK_MASSCARTELEPORT);
						return true;
					}
				}
			}
		}
		return true;
	}

	bool OnPlayerSpawn(int playerid) override
	{
		if (!IsPlayerNPC(playerid))
		{
			clock_t TimeNow = clock();
			int pSkin = GetPlayerSkin(playerid);
			p_HasWeapon[playerid].fill(false);
			p_HasWeapon[playerid][0] = true;
			p_HasWeapon[playerid][g_SkinHasWeapon[pSkin][0]] = true;
			p_HasWeapon[playerid][g_SkinHasWeapon[pSkin][1]] = true;
			p_HasWeapon[playerid][g_SkinHasWeapon[pSkin][2]] = true;
			p_HasWeapon[playerid][p_SpawnInfoWeapons[playerid][0]] = true;
			p_HasWeapon[playerid][p_SpawnInfoWeapons[playerid][1]] = true;
			p_HasWeapon[playerid][p_SpawnInfoWeapons[playerid][2]] = true;
			p_SpawnTime[playerid] = TimeNow;
			p_AirBrkCheck[playerid].LastMeasured = p_SpawnTime[playerid];
			GetPlayerPos(playerid, &p_AirBrkCheck[playerid].lastX, &p_AirBrkCheck[playerid].lastY, &p_AirBrkCheck[playerid].lastZ);
			p_AirBrkCheck[playerid].lastX = p_AirBrkCheck[playerid].newX + 0.2f;
			p_AirBrkCheck[playerid].lastY = p_AirBrkCheck[playerid].newY + 0.2f;
			p_AirBrkCheck[playerid].lastZ = p_AirBrkCheck[playerid].newZ + 0.2f;
			p_ABneecnextdetect[playerid] = false;
			Spawned[playerid] = true;
			teleportprot[playerid] = TimeNow;
			PlayerHealth[playerid][0] = 100.0f;
			PlayerHealth[playerid][1] = 100.0f;
			PlayerArmour[playerid][0] = 0.0f;
			PlayerArmour[playerid][1] = 0.0f;
			WeaponProtection[playerid] = TimeNow;
		}
		return true;
	}
	bool OnPlayerPickUpPickup(int playerid, int pickupid) override
	{
		/*
		GetPickupPos(pickupid, X, Y, Z);
		if (!IsPlayerInRangeOfPoint(playerid, 30.0, X, Y, Z))
		{
			return false;
		}*/
		return true;
	}
	bool OnPlayerDeath(int playerid, int killerid, int reason) override
	{
		float hp;
		std::array<float,3> POS;		

		clock_t TimeNow = clock();
		if (TimeNow < p_NewKillAllowed[playerid])
		{
			debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|TimeNow < p_NewKillAllowed[playerid]"));
			return false;
		}

		p_NewKillAllowed[playerid] = TimeNow + 2500;

		p_HasJetPack[playerid] = false;
		safeResetPlayerWeapons(playerid);
		
		if (killerid != INVALID_PLAYER_ID)
		{
			if (g_IS_TRUE(CHECK_SPOOFKILL))
			{
				if (p_IS_TRUE(playerid, CHECK_SPOOFKILL))
				{
					if (reason < 0 && reason > 54)
					{
						debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|reason < 0 && reason > 54"));
						return false;
					}
					if (GetPlayerInterior(playerid) != GetPlayerInterior(killerid))
					{
						debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|GetPlayerInterior(playerid) != GetPlayerInterior(killerid)"));
						return false;
					}
					if (Player[playerid].WorldID != Player[killerid].WorldID)
					{
						debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|Player[playerid].WorldID != Player[killerid].WorldID"));
						return false;
					}
					if (!IsPlayerStreamedIn(killerid, playerid))
					{
						debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|!IsPlayerStreamedIn(killerid, playerid)"));
						return false;
					}

					GetPlayerHealth(killerid, &hp);
					if (hp < 1.0)
					{
						debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|hp < 1.0|1"));
						return false;
					}

					GetPlayerHealth(playerid, &hp);
					if (hp > 1.0)
					{
						SetPlayerHealth(playerid, 0.0f);
						debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|hp > 1.0|2"));
						//return false;
					}

					if (!p_HasBeenHitByWeapon[playerid][killerid][reason])
					{
						if (reason == 37)//flamethrower
						{
							bool possible = Player[killerid].weapondata.equipped[WeaponInfo[39].category] == 39 ||
											Player[killerid].weapondata.equipped[WeaponInfo[37].category] == 37 ||
											Player[killerid].weapondata.equipped[WeaponInfo[36].category] == 36 ||
											Player[killerid].weapondata.equipped[WeaponInfo[35].category] == 35 ||
											Player[killerid].weapondata.equipped[WeaponInfo[18].category] == 18 ||
											Player[killerid].weapondata.equipped[WeaponInfo[16].category] == 16 ||
											Player[killerid].CurrentVehicleModel == 520 ||
											Player[killerid].CurrentVehicleModel == 432 ||
											Player[killerid].CurrentVehicleModel == 425;
							if (!possible)
							{
								debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|!possible|reason == 37"));
								return false;
							}
						}
						else if (reason == 51)//explosion
						{
							bool possible = Player[killerid].weapondata.equipped[WeaponInfo[39].category] == 39 ||
											Player[killerid].weapondata.equipped[WeaponInfo[36].category] == 36 ||
											Player[killerid].weapondata.equipped[WeaponInfo[35].category] == 35 ||
											Player[killerid].weapondata.equipped[WeaponInfo[16].category] == 16 ||
											Player[killerid].CurrentVehicleModel == 520 ||
											Player[killerid].CurrentVehicleModel == 432 ||
											Player[killerid].CurrentVehicleModel == 425;
							if (!possible)
							{
								debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|!possible|reason == 51"));
								return false;
							}
						}
						else if (reason == 31)
						{
							bool possible = 
											Player[killerid].CurrentVehicleModel == 447 ||
											Player[killerid].CurrentVehicleModel == 464 ||
											Player[killerid].CurrentVehicleModel == 476 ||
											Player[killerid].CurrentVehicleModel == 430 ||
											Player[killerid].weapondata.equipped[WeaponInfo[31].category] == 31;
							if (!possible)
							{
								debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|!possible|reason == 31"));
								return false;
							}
						}
						else if (reason == 38)
						{
							bool possible = 
											Player[killerid].CurrentVehicleModel == 425 ||
											Player[killerid].weapondata.equipped[WeaponInfo[38].category] == 38;
							if (!possible)
							{
								debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|!possible|reason == 38"));
								return false;
							}
						}
						else
						{
							GetPlayerPos(playerid, &POS[0], &POS[1], &POS[2]);
							if (reason == 0)
							{		
								if (!IsPlayerInRangeOfPoint(killerid, 5.0, POS[0], POS[1], POS[2]))
								{
									debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|!possible|reason == 0"));
									return false;
								}
							}
							else
							{
								bool possible =
									(Player[killerid].weapondata.equipped[WeaponInfo[reason].category] == (unsigned int)reason &&
									IsPlayerInRangeOfPoint(killerid, WeaponInfo[reason].maxkilldistance, POS[0], POS[1], POS[2]) &&
									WeaponInfo[reason].CanKillWithIt);
								bool possible_veh = (Player[killerid].IsDriver && (reason == 49 || (reason == 50 && IsVehicleHelicopter(Player[killerid].CurrentVehicleModel))));
								if (!possible && !possible_veh)
								{
									debug_fixSendClientMessageToAll(Functions::string_format("OnPlayerDeath::BLOCK()|!possible|else"));
									return false;
								}
							}
						}
					}
				}
			}
			if (g_IS_TRUE(CHECK_SPAWNKILL))
			{
				if (p_IS_TRUE(playerid, CHECK_SPAWNKILL))
				{
					if (TimeNow - p_SpawnTime[playerid] < TimeDiffForSpawnKill)
					{
						Report(killerid, CHECK_SPAWNKILL, reason, playerid);
						return true;
					}
				}
			}
		}
		SecureZeroMemory(&p_HasBeenHitByWeapon[playerid], sizeof(p_HasBeenHitByWeapon[playerid]));
		Spawned[playerid] = false;
		PlayerHealth[playerid][0] = 0.0f;
		PlayerHealth[playerid][1] = 0.0f;
		PlayerArmour[playerid][0] = 0.0f;
		PlayerArmour[playerid][1] = 0.0f;
		return true;
	}
} _AntyCheatExtension;